/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersRecordfood,
    ControllersRecordfoodFromJSON,
    ControllersRecordfoodToJSON,
    EntFOODMENU,
    EntFOODMENUFromJSON,
    EntFOODMENUToJSON,
    EntMainingre,
    EntMainingreFromJSON,
    EntMainingreToJSON,
    EntRecordfood,
    EntRecordfoodFromJSON,
    EntRecordfoodToJSON,
    EntSource,
    EntSourceFromJSON,
    EntSourceToJSON,
    EntUser,
    EntUserFromJSON,
    EntUserToJSON,
} from '../models';

export interface CreateFoodmenuRequest {
    foodmenu: EntFOODMENU;
}

export interface CreateMainingreRequest {
    mainingre: EntMainingre;
}

export interface CreateRecordfoodRequest {
    recordfood: ControllersRecordfood;
}

export interface CreateSourceRequest {
    source: EntSource;
}

export interface CreateUserRequest {
    user: EntUser;
}

export interface DeleteFoodmenuRequest {
    id: number;
}

export interface DeleteMainingreRequest {
    id: number;
}

export interface DeleteRecordfoodRequest {
    id: number;
}

export interface DeleteSourceRequest {
    id: number;
}

export interface DeleteUserRequest {
    id: number;
}

export interface GetFoodmenuRequest {
    id: number;
}

export interface GetMainingreRequest {
    id: number;
}

export interface GetSourceRequest {
    id: number;
}

export interface GetUserRequest {
    id: number;
}

export interface ListFoodmenuRequest {
    limit?: number;
    offset?: number;
}

export interface ListMainingreRequest {
    limit?: number;
    offset?: number;
}

export interface ListRecordfoodRequest {
    limit?: number;
    offset?: number;
}

export interface ListSourceRequest {
    limit?: number;
    offset?: number;
}

export interface ListUserRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateFoodmenuRequest {
    id: number;
    foodmenu: EntFOODMENU;
}

export interface UpdateMainingreRequest {
    id: number;
    mainingre: EntMainingre;
}

export interface UpdateSourceRequest {
    id: number;
    source: EntSource;
}

export interface UpdateUserRequest {
    id: number;
    user: EntUser;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create foodmenu
     * Create foodmenu
     */
    async createFoodmenuRaw(requestParameters: CreateFoodmenuRequest): Promise<runtime.ApiResponse<EntFOODMENU>> {
        if (requestParameters.foodmenu === null || requestParameters.foodmenu === undefined) {
            throw new runtime.RequiredError('foodmenu','Required parameter requestParameters.foodmenu was null or undefined when calling createFoodmenu.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/foodmenus`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntFOODMENUToJSON(requestParameters.foodmenu),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFOODMENUFromJSON(jsonValue));
    }

    /**
     * Create foodmenu
     * Create foodmenu
     */
    async createFoodmenu(requestParameters: CreateFoodmenuRequest): Promise<EntFOODMENU> {
        const response = await this.createFoodmenuRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create mainingre
     * Create mainingre
     */
    async createMainingreRaw(requestParameters: CreateMainingreRequest): Promise<runtime.ApiResponse<EntMainingre>> {
        if (requestParameters.mainingre === null || requestParameters.mainingre === undefined) {
            throw new runtime.RequiredError('mainingre','Required parameter requestParameters.mainingre was null or undefined when calling createMainingre.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/mainingres`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntMainingreToJSON(requestParameters.mainingre),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMainingreFromJSON(jsonValue));
    }

    /**
     * Create mainingre
     * Create mainingre
     */
    async createMainingre(requestParameters: CreateMainingreRequest): Promise<EntMainingre> {
        const response = await this.createMainingreRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create recordfood
     * Create recordfood
     */
    async createRecordfoodRaw(requestParameters: CreateRecordfoodRequest): Promise<runtime.ApiResponse<EntRecordfood>> {
        if (requestParameters.recordfood === null || requestParameters.recordfood === undefined) {
            throw new runtime.RequiredError('recordfood','Required parameter requestParameters.recordfood was null or undefined when calling createRecordfood.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/recordfoods`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersRecordfoodToJSON(requestParameters.recordfood),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRecordfoodFromJSON(jsonValue));
    }

    /**
     * Create recordfood
     * Create recordfood
     */
    async createRecordfood(requestParameters: CreateRecordfoodRequest): Promise<EntRecordfood> {
        const response = await this.createRecordfoodRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create source
     * Create source
     */
    async createSourceRaw(requestParameters: CreateSourceRequest): Promise<runtime.ApiResponse<EntSource>> {
        if (requestParameters.source === null || requestParameters.source === undefined) {
            throw new runtime.RequiredError('source','Required parameter requestParameters.source was null or undefined when calling createSource.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sources`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntSourceToJSON(requestParameters.source),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSourceFromJSON(jsonValue));
    }

    /**
     * Create source
     * Create source
     */
    async createSource(requestParameters: CreateSourceRequest): Promise<EntSource> {
        const response = await this.createSourceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create user
     * Create user
     */
    async createUserRaw(requestParameters: CreateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling createUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * Create user
     * Create user
     */
    async createUser(requestParameters: CreateUserRequest): Promise<EntUser> {
        const response = await this.createUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get foodmenu by ID
     * Delete a foodmenu entity by ID
     */
    async deleteFoodmenuRaw(requestParameters: DeleteFoodmenuRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteFoodmenu.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/foodmenus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get foodmenu by ID
     * Delete a foodmenu entity by ID
     */
    async deleteFoodmenu(requestParameters: DeleteFoodmenuRequest): Promise<object> {
        const response = await this.deleteFoodmenuRaw(requestParameters);
        return await response.value();
    }

    /**
     * get mainingre by ID
     * Delete a mainingre entity by ID
     */
    async deleteMainingreRaw(requestParameters: DeleteMainingreRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteMainingre.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mainingres/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get mainingre by ID
     * Delete a mainingre entity by ID
     */
    async deleteMainingre(requestParameters: DeleteMainingreRequest): Promise<object> {
        const response = await this.deleteMainingreRaw(requestParameters);
        return await response.value();
    }

    /**
     * get recordfood by ID
     * Delete a recordfood entity by ID
     */
    async deleteRecordfoodRaw(requestParameters: DeleteRecordfoodRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteRecordfood.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/recordfoods/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get recordfood by ID
     * Delete a recordfood entity by ID
     */
    async deleteRecordfood(requestParameters: DeleteRecordfoodRequest): Promise<object> {
        const response = await this.deleteRecordfoodRaw(requestParameters);
        return await response.value();
    }

    /**
     * get source by ID
     * Delete a source entity by ID
     */
    async deleteSourceRaw(requestParameters: DeleteSourceRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSource.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sources/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get source by ID
     * Delete a source entity by ID
     */
    async deleteSource(requestParameters: DeleteSourceRequest): Promise<object> {
        const response = await this.deleteSourceRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUserRaw(requestParameters: DeleteUserRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get user by ID
     * Delete a user entity by ID
     */
    async deleteUser(requestParameters: DeleteUserRequest): Promise<object> {
        const response = await this.deleteUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * get foodmenu by ID
     * Get a foodmenu entity by ID
     */
    async getFoodmenuRaw(requestParameters: GetFoodmenuRequest): Promise<runtime.ApiResponse<EntFOODMENU>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFoodmenu.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/foodmenus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFOODMENUFromJSON(jsonValue));
    }

    /**
     * get foodmenu by ID
     * Get a foodmenu entity by ID
     */
    async getFoodmenu(requestParameters: GetFoodmenuRequest): Promise<EntFOODMENU> {
        const response = await this.getFoodmenuRaw(requestParameters);
        return await response.value();
    }

    /**
     * get mainingre by ID
     * Get a mainingre entity by ID
     */
    async getMainingreRaw(requestParameters: GetMainingreRequest): Promise<runtime.ApiResponse<EntMainingre>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getMainingre.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mainingres/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMainingreFromJSON(jsonValue));
    }

    /**
     * get mainingre by ID
     * Get a mainingre entity by ID
     */
    async getMainingre(requestParameters: GetMainingreRequest): Promise<EntMainingre> {
        const response = await this.getMainingreRaw(requestParameters);
        return await response.value();
    }

    /**
     * get source by ID
     * Get a source entity by ID
     */
    async getSourceRaw(requestParameters: GetSourceRequest): Promise<runtime.ApiResponse<EntSource>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSource.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sources/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSourceFromJSON(jsonValue));
    }

    /**
     * get source by ID
     * Get a source entity by ID
     */
    async getSource(requestParameters: GetSourceRequest): Promise<EntSource> {
        const response = await this.getSourceRaw(requestParameters);
        return await response.value();
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUserRaw(requestParameters: GetUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * get user by ID
     * Get a user entity by ID
     */
    async getUser(requestParameters: GetUserRequest): Promise<EntUser> {
        const response = await this.getUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * list foodmenu entities
     * List foodmenu entities
     */
    async listFoodmenuRaw(requestParameters: ListFoodmenuRequest): Promise<runtime.ApiResponse<Array<EntFOODMENU>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/foodmenus`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntFOODMENUFromJSON));
    }

    /**
     * list foodmenu entities
     * List foodmenu entities
     */
    async listFoodmenu(requestParameters: ListFoodmenuRequest): Promise<Array<EntFOODMENU>> {
        const response = await this.listFoodmenuRaw(requestParameters);
        return await response.value();
    }

    /**
     * list mainingre entities
     * List mainingre entities
     */
    async listMainingreRaw(requestParameters: ListMainingreRequest): Promise<runtime.ApiResponse<Array<EntMainingre>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mainingres`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntMainingreFromJSON));
    }

    /**
     * list mainingre entities
     * List mainingre entities
     */
    async listMainingre(requestParameters: ListMainingreRequest): Promise<Array<EntMainingre>> {
        const response = await this.listMainingreRaw(requestParameters);
        return await response.value();
    }

    /**
     * list recordfood entities
     * List recordfood entities
     */
    async listRecordfoodRaw(requestParameters: ListRecordfoodRequest): Promise<runtime.ApiResponse<Array<EntRecordfood>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/recordfoods`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRecordfoodFromJSON));
    }

    /**
     * list recordfood entities
     * List recordfood entities
     */
    async listRecordfood(requestParameters: ListRecordfoodRequest): Promise<Array<EntRecordfood>> {
        const response = await this.listRecordfoodRaw(requestParameters);
        return await response.value();
    }

    /**
     * list source entities
     * List source entities
     */
    async listSourceRaw(requestParameters: ListSourceRequest): Promise<runtime.ApiResponse<Array<EntSource>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/sources`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntSourceFromJSON));
    }

    /**
     * list source entities
     * List source entities
     */
    async listSource(requestParameters: ListSourceRequest): Promise<Array<EntSource>> {
        const response = await this.listSourceRaw(requestParameters);
        return await response.value();
    }

    /**
     * list user entities
     * List user entities
     */
    async listUserRaw(requestParameters: ListUserRequest): Promise<runtime.ApiResponse<Array<EntUser>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntUserFromJSON));
    }

    /**
     * list user entities
     * List user entities
     */
    async listUser(requestParameters: ListUserRequest): Promise<Array<EntUser>> {
        const response = await this.listUserRaw(requestParameters);
        return await response.value();
    }

    /**
     * update foodmenu by ID
     * Update a foodmenu entity by ID
     */
    async updateFoodmenuRaw(requestParameters: UpdateFoodmenuRequest): Promise<runtime.ApiResponse<EntFOODMENU>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateFoodmenu.');
        }

        if (requestParameters.foodmenu === null || requestParameters.foodmenu === undefined) {
            throw new runtime.RequiredError('foodmenu','Required parameter requestParameters.foodmenu was null or undefined when calling updateFoodmenu.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/foodmenus/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntFOODMENUToJSON(requestParameters.foodmenu),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFOODMENUFromJSON(jsonValue));
    }

    /**
     * update foodmenu by ID
     * Update a foodmenu entity by ID
     */
    async updateFoodmenu(requestParameters: UpdateFoodmenuRequest): Promise<EntFOODMENU> {
        const response = await this.updateFoodmenuRaw(requestParameters);
        return await response.value();
    }

    /**
     * update mainingre by ID
     * Update a mainingre entity by ID
     */
    async updateMainingreRaw(requestParameters: UpdateMainingreRequest): Promise<runtime.ApiResponse<EntMainingre>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateMainingre.');
        }

        if (requestParameters.mainingre === null || requestParameters.mainingre === undefined) {
            throw new runtime.RequiredError('mainingre','Required parameter requestParameters.mainingre was null or undefined when calling updateMainingre.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/mainingres/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntMainingreToJSON(requestParameters.mainingre),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntMainingreFromJSON(jsonValue));
    }

    /**
     * update mainingre by ID
     * Update a mainingre entity by ID
     */
    async updateMainingre(requestParameters: UpdateMainingreRequest): Promise<EntMainingre> {
        const response = await this.updateMainingreRaw(requestParameters);
        return await response.value();
    }

    /**
     * update source by ID
     * Update a source entity by ID
     */
    async updateSourceRaw(requestParameters: UpdateSourceRequest): Promise<runtime.ApiResponse<EntSource>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSource.');
        }

        if (requestParameters.source === null || requestParameters.source === undefined) {
            throw new runtime.RequiredError('source','Required parameter requestParameters.source was null or undefined when calling updateSource.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/sources/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntSourceToJSON(requestParameters.source),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSourceFromJSON(jsonValue));
    }

    /**
     * update source by ID
     * Update a source entity by ID
     */
    async updateSource(requestParameters: UpdateSourceRequest): Promise<EntSource> {
        const response = await this.updateSourceRaw(requestParameters);
        return await response.value();
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUserRaw(requestParameters: UpdateUserRequest): Promise<runtime.ApiResponse<EntUser>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateUser.');
        }

        if (requestParameters.user === null || requestParameters.user === undefined) {
            throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling updateUser.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/users/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntUserToJSON(requestParameters.user),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntUserFromJSON(jsonValue));
    }

    /**
     * update user by ID
     * Update a user entity by ID
     */
    async updateUser(requestParameters: UpdateUserRequest): Promise<EntUser> {
        const response = await this.updateUserRaw(requestParameters);
        return await response.value();
    }

}
