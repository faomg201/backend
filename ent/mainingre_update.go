// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/faomg201/app/ent/mainingre"
	"github.com/faomg201/app/ent/predicate"
	"github.com/faomg201/app/ent/recordfood"
)

// MainingreUpdate is the builder for updating Mainingre entities.
type MainingreUpdate struct {
	config
	hooks      []Hook
	mutation   *MainingreMutation
	predicates []predicate.Mainingre
}

// Where adds a new predicate for the builder.
func (mu *MainingreUpdate) Where(ps ...predicate.Mainingre) *MainingreUpdate {
	mu.predicates = append(mu.predicates, ps...)
	return mu
}

// SetMAININGREDIENTNAME sets the MAIN_INGREDIENT_NAME field.
func (mu *MainingreUpdate) SetMAININGREDIENTNAME(s string) *MainingreUpdate {
	mu.mutation.SetMAININGREDIENTNAME(s)
	return mu
}

// AddMAININGRERECORDIDs adds the MAININGRE_RECORD edge to Recordfood by ids.
func (mu *MainingreUpdate) AddMAININGRERECORDIDs(ids ...int) *MainingreUpdate {
	mu.mutation.AddMAININGRERECORDIDs(ids...)
	return mu
}

// AddMAININGRERECORD adds the MAININGRE_RECORD edges to Recordfood.
func (mu *MainingreUpdate) AddMAININGRERECORD(r ...*Recordfood) *MainingreUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mu.AddMAININGRERECORDIDs(ids...)
}

// Mutation returns the MainingreMutation object of the builder.
func (mu *MainingreUpdate) Mutation() *MainingreMutation {
	return mu.mutation
}

// ClearMAININGRERECORD clears all "MAININGRE_RECORD" edges to type Recordfood.
func (mu *MainingreUpdate) ClearMAININGRERECORD() *MainingreUpdate {
	mu.mutation.ClearMAININGRERECORD()
	return mu
}

// RemoveMAININGRERECORDIDs removes the MAININGRE_RECORD edge to Recordfood by ids.
func (mu *MainingreUpdate) RemoveMAININGRERECORDIDs(ids ...int) *MainingreUpdate {
	mu.mutation.RemoveMAININGRERECORDIDs(ids...)
	return mu
}

// RemoveMAININGRERECORD removes MAININGRE_RECORD edges to Recordfood.
func (mu *MainingreUpdate) RemoveMAININGRERECORD(r ...*Recordfood) *MainingreUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mu.RemoveMAININGRERECORDIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (mu *MainingreUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MainingreMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MainingreUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MainingreUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MainingreUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mu *MainingreUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mainingre.Table,
			Columns: mainingre.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mainingre.FieldID,
			},
		},
	}
	if ps := mu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.MAININGREDIENTNAME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mainingre.FieldMAININGREDIENTNAME,
		})
	}
	if mu.mutation.MAININGRERECORDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mainingre.MAININGRERECORDTable,
			Columns: []string{mainingre.MAININGRERECORDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordfood.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.RemovedMAININGRERECORDIDs(); len(nodes) > 0 && !mu.mutation.MAININGRERECORDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mainingre.MAININGRERECORDTable,
			Columns: []string{mainingre.MAININGRERECORDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordfood.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.MAININGRERECORDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mainingre.MAININGRERECORDTable,
			Columns: []string{mainingre.MAININGRERECORDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordfood.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mainingre.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MainingreUpdateOne is the builder for updating a single Mainingre entity.
type MainingreUpdateOne struct {
	config
	hooks    []Hook
	mutation *MainingreMutation
}

// SetMAININGREDIENTNAME sets the MAIN_INGREDIENT_NAME field.
func (muo *MainingreUpdateOne) SetMAININGREDIENTNAME(s string) *MainingreUpdateOne {
	muo.mutation.SetMAININGREDIENTNAME(s)
	return muo
}

// AddMAININGRERECORDIDs adds the MAININGRE_RECORD edge to Recordfood by ids.
func (muo *MainingreUpdateOne) AddMAININGRERECORDIDs(ids ...int) *MainingreUpdateOne {
	muo.mutation.AddMAININGRERECORDIDs(ids...)
	return muo
}

// AddMAININGRERECORD adds the MAININGRE_RECORD edges to Recordfood.
func (muo *MainingreUpdateOne) AddMAININGRERECORD(r ...*Recordfood) *MainingreUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return muo.AddMAININGRERECORDIDs(ids...)
}

// Mutation returns the MainingreMutation object of the builder.
func (muo *MainingreUpdateOne) Mutation() *MainingreMutation {
	return muo.mutation
}

// ClearMAININGRERECORD clears all "MAININGRE_RECORD" edges to type Recordfood.
func (muo *MainingreUpdateOne) ClearMAININGRERECORD() *MainingreUpdateOne {
	muo.mutation.ClearMAININGRERECORD()
	return muo
}

// RemoveMAININGRERECORDIDs removes the MAININGRE_RECORD edge to Recordfood by ids.
func (muo *MainingreUpdateOne) RemoveMAININGRERECORDIDs(ids ...int) *MainingreUpdateOne {
	muo.mutation.RemoveMAININGRERECORDIDs(ids...)
	return muo
}

// RemoveMAININGRERECORD removes MAININGRE_RECORD edges to Recordfood.
func (muo *MainingreUpdateOne) RemoveMAININGRERECORD(r ...*Recordfood) *MainingreUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return muo.RemoveMAININGRERECORDIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (muo *MainingreUpdateOne) Save(ctx context.Context) (*Mainingre, error) {
	var (
		err  error
		node *Mainingre
	)
	if len(muo.hooks) == 0 {
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MainingreMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MainingreUpdateOne) SaveX(ctx context.Context) *Mainingre {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MainingreUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MainingreUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (muo *MainingreUpdateOne) sqlSave(ctx context.Context) (_node *Mainingre, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   mainingre.Table,
			Columns: mainingre.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mainingre.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Mainingre.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := muo.mutation.MAININGREDIENTNAME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mainingre.FieldMAININGREDIENTNAME,
		})
	}
	if muo.mutation.MAININGRERECORDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mainingre.MAININGRERECORDTable,
			Columns: []string{mainingre.MAININGRERECORDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordfood.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.RemovedMAININGRERECORDIDs(); len(nodes) > 0 && !muo.mutation.MAININGRERECORDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mainingre.MAININGRERECORDTable,
			Columns: []string{mainingre.MAININGRERECORDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordfood.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.MAININGRERECORDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mainingre.MAININGRERECORDTable,
			Columns: []string{mainingre.MAININGRERECORDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordfood.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Mainingre{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mainingre.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
