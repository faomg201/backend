// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/faomg201/app/ent/migrate"

	"github.com/faomg201/app/ent/foodmenu"
	"github.com/faomg201/app/ent/mainingre"
	"github.com/faomg201/app/ent/recordfood"
	"github.com/faomg201/app/ent/source"
	"github.com/faomg201/app/ent/user"

	"github.com/facebook/ent/dialect"
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// FOODMENU is the client for interacting with the FOODMENU builders.
	FOODMENU *FOODMENUClient
	// Mainingre is the client for interacting with the Mainingre builders.
	Mainingre *MainingreClient
	// Recordfood is the client for interacting with the Recordfood builders.
	Recordfood *RecordfoodClient
	// Source is the client for interacting with the Source builders.
	Source *SourceClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.FOODMENU = NewFOODMENUClient(c.config)
	c.Mainingre = NewMainingreClient(c.config)
	c.Recordfood = NewRecordfoodClient(c.config)
	c.Source = NewSourceClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:        ctx,
		config:     cfg,
		FOODMENU:   NewFOODMENUClient(cfg),
		Mainingre:  NewMainingreClient(cfg),
		Recordfood: NewRecordfoodClient(cfg),
		Source:     NewSourceClient(cfg),
		User:       NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:     cfg,
		FOODMENU:   NewFOODMENUClient(cfg),
		Mainingre:  NewMainingreClient(cfg),
		Recordfood: NewRecordfoodClient(cfg),
		Source:     NewSourceClient(cfg),
		User:       NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		FOODMENU.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.FOODMENU.Use(hooks...)
	c.Mainingre.Use(hooks...)
	c.Recordfood.Use(hooks...)
	c.Source.Use(hooks...)
	c.User.Use(hooks...)
}

// FOODMENUClient is a client for the FOODMENU schema.
type FOODMENUClient struct {
	config
}

// NewFOODMENUClient returns a client for the FOODMENU from the given config.
func NewFOODMENUClient(c config) *FOODMENUClient {
	return &FOODMENUClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `foodmenu.Hooks(f(g(h())))`.
func (c *FOODMENUClient) Use(hooks ...Hook) {
	c.hooks.FOODMENU = append(c.hooks.FOODMENU, hooks...)
}

// Create returns a create builder for FOODMENU.
func (c *FOODMENUClient) Create() *FOODMENUCreate {
	mutation := newFOODMENUMutation(c.config, OpCreate)
	return &FOODMENUCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of FOODMENU entities.
func (c *FOODMENUClient) CreateBulk(builders ...*FOODMENUCreate) *FOODMENUCreateBulk {
	return &FOODMENUCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FOODMENU.
func (c *FOODMENUClient) Update() *FOODMENUUpdate {
	mutation := newFOODMENUMutation(c.config, OpUpdate)
	return &FOODMENUUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FOODMENUClient) UpdateOne(f *FOODMENU) *FOODMENUUpdateOne {
	mutation := newFOODMENUMutation(c.config, OpUpdateOne, withFOODMENU(f))
	return &FOODMENUUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FOODMENUClient) UpdateOneID(id int) *FOODMENUUpdateOne {
	mutation := newFOODMENUMutation(c.config, OpUpdateOne, withFOODMENUID(id))
	return &FOODMENUUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FOODMENU.
func (c *FOODMENUClient) Delete() *FOODMENUDelete {
	mutation := newFOODMENUMutation(c.config, OpDelete)
	return &FOODMENUDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FOODMENUClient) DeleteOne(f *FOODMENU) *FOODMENUDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FOODMENUClient) DeleteOneID(id int) *FOODMENUDeleteOne {
	builder := c.Delete().Where(foodmenu.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FOODMENUDeleteOne{builder}
}

// Query returns a query builder for FOODMENU.
func (c *FOODMENUClient) Query() *FOODMENUQuery {
	return &FOODMENUQuery{config: c.config}
}

// Get returns a FOODMENU entity by its id.
func (c *FOODMENUClient) Get(ctx context.Context, id int) (*FOODMENU, error) {
	return c.Query().Where(foodmenu.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FOODMENUClient) GetX(ctx context.Context, id int) *FOODMENU {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryFOODMENURECORD queries the FOODMENU_RECORD edge of a FOODMENU.
func (c *FOODMENUClient) QueryFOODMENURECORD(f *FOODMENU) *RecordfoodQuery {
	query := &RecordfoodQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(foodmenu.Table, foodmenu.FieldID, id),
			sqlgraph.To(recordfood.Table, recordfood.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, foodmenu.FOODMENURECORDTable, foodmenu.FOODMENURECORDColumn),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FOODMENUClient) Hooks() []Hook {
	return c.hooks.FOODMENU
}

// MainingreClient is a client for the Mainingre schema.
type MainingreClient struct {
	config
}

// NewMainingreClient returns a client for the Mainingre from the given config.
func NewMainingreClient(c config) *MainingreClient {
	return &MainingreClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `mainingre.Hooks(f(g(h())))`.
func (c *MainingreClient) Use(hooks ...Hook) {
	c.hooks.Mainingre = append(c.hooks.Mainingre, hooks...)
}

// Create returns a create builder for Mainingre.
func (c *MainingreClient) Create() *MainingreCreate {
	mutation := newMainingreMutation(c.config, OpCreate)
	return &MainingreCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Mainingre entities.
func (c *MainingreClient) CreateBulk(builders ...*MainingreCreate) *MainingreCreateBulk {
	return &MainingreCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Mainingre.
func (c *MainingreClient) Update() *MainingreUpdate {
	mutation := newMainingreMutation(c.config, OpUpdate)
	return &MainingreUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MainingreClient) UpdateOne(m *Mainingre) *MainingreUpdateOne {
	mutation := newMainingreMutation(c.config, OpUpdateOne, withMainingre(m))
	return &MainingreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MainingreClient) UpdateOneID(id int) *MainingreUpdateOne {
	mutation := newMainingreMutation(c.config, OpUpdateOne, withMainingreID(id))
	return &MainingreUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Mainingre.
func (c *MainingreClient) Delete() *MainingreDelete {
	mutation := newMainingreMutation(c.config, OpDelete)
	return &MainingreDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MainingreClient) DeleteOne(m *Mainingre) *MainingreDeleteOne {
	return c.DeleteOneID(m.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MainingreClient) DeleteOneID(id int) *MainingreDeleteOne {
	builder := c.Delete().Where(mainingre.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MainingreDeleteOne{builder}
}

// Query returns a query builder for Mainingre.
func (c *MainingreClient) Query() *MainingreQuery {
	return &MainingreQuery{config: c.config}
}

// Get returns a Mainingre entity by its id.
func (c *MainingreClient) Get(ctx context.Context, id int) (*Mainingre, error) {
	return c.Query().Where(mainingre.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MainingreClient) GetX(ctx context.Context, id int) *Mainingre {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryMAININGRERECORD queries the MAININGRE_RECORD edge of a Mainingre.
func (c *MainingreClient) QueryMAININGRERECORD(m *Mainingre) *RecordfoodQuery {
	query := &RecordfoodQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(mainingre.Table, mainingre.FieldID, id),
			sqlgraph.To(recordfood.Table, recordfood.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, mainingre.MAININGRERECORDTable, mainingre.MAININGRERECORDColumn),
		)
		fromV = sqlgraph.Neighbors(m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *MainingreClient) Hooks() []Hook {
	return c.hooks.Mainingre
}

// RecordfoodClient is a client for the Recordfood schema.
type RecordfoodClient struct {
	config
}

// NewRecordfoodClient returns a client for the Recordfood from the given config.
func NewRecordfoodClient(c config) *RecordfoodClient {
	return &RecordfoodClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `recordfood.Hooks(f(g(h())))`.
func (c *RecordfoodClient) Use(hooks ...Hook) {
	c.hooks.Recordfood = append(c.hooks.Recordfood, hooks...)
}

// Create returns a create builder for Recordfood.
func (c *RecordfoodClient) Create() *RecordfoodCreate {
	mutation := newRecordfoodMutation(c.config, OpCreate)
	return &RecordfoodCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Recordfood entities.
func (c *RecordfoodClient) CreateBulk(builders ...*RecordfoodCreate) *RecordfoodCreateBulk {
	return &RecordfoodCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Recordfood.
func (c *RecordfoodClient) Update() *RecordfoodUpdate {
	mutation := newRecordfoodMutation(c.config, OpUpdate)
	return &RecordfoodUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RecordfoodClient) UpdateOne(r *Recordfood) *RecordfoodUpdateOne {
	mutation := newRecordfoodMutation(c.config, OpUpdateOne, withRecordfood(r))
	return &RecordfoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RecordfoodClient) UpdateOneID(id int) *RecordfoodUpdateOne {
	mutation := newRecordfoodMutation(c.config, OpUpdateOne, withRecordfoodID(id))
	return &RecordfoodUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Recordfood.
func (c *RecordfoodClient) Delete() *RecordfoodDelete {
	mutation := newRecordfoodMutation(c.config, OpDelete)
	return &RecordfoodDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RecordfoodClient) DeleteOne(r *Recordfood) *RecordfoodDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RecordfoodClient) DeleteOneID(id int) *RecordfoodDeleteOne {
	builder := c.Delete().Where(recordfood.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RecordfoodDeleteOne{builder}
}

// Query returns a query builder for Recordfood.
func (c *RecordfoodClient) Query() *RecordfoodQuery {
	return &RecordfoodQuery{config: c.config}
}

// Get returns a Recordfood entity by its id.
func (c *RecordfoodClient) Get(ctx context.Context, id int) (*Recordfood, error) {
	return c.Query().Where(recordfood.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RecordfoodClient) GetX(ctx context.Context, id int) *Recordfood {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRECORDUSER queries the RECORD_USER edge of a Recordfood.
func (c *RecordfoodClient) QueryRECORDUSER(r *Recordfood) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recordfood.Table, recordfood.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recordfood.RECORDUSERTable, recordfood.RECORDUSERColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRECORDFOODMENU queries the RECORD_FOODMENU edge of a Recordfood.
func (c *RecordfoodClient) QueryRECORDFOODMENU(r *Recordfood) *FOODMENUQuery {
	query := &FOODMENUQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recordfood.Table, recordfood.FieldID, id),
			sqlgraph.To(foodmenu.Table, foodmenu.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recordfood.RECORDFOODMENUTable, recordfood.RECORDFOODMENUColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRECORDINGREDIENT queries the RECORD_INGREDIENT edge of a Recordfood.
func (c *RecordfoodClient) QueryRECORDINGREDIENT(r *Recordfood) *MainingreQuery {
	query := &MainingreQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recordfood.Table, recordfood.FieldID, id),
			sqlgraph.To(mainingre.Table, mainingre.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recordfood.RECORDINGREDIENTTable, recordfood.RECORDINGREDIENTColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryRECORDSOURCE queries the RECORD_SOURCE edge of a Recordfood.
func (c *RecordfoodClient) QueryRECORDSOURCE(r *Recordfood) *SourceQuery {
	query := &SourceQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(recordfood.Table, recordfood.FieldID, id),
			sqlgraph.To(source.Table, source.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, recordfood.RECORDSOURCETable, recordfood.RECORDSOURCEColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RecordfoodClient) Hooks() []Hook {
	return c.hooks.Recordfood
}

// SourceClient is a client for the Source schema.
type SourceClient struct {
	config
}

// NewSourceClient returns a client for the Source from the given config.
func NewSourceClient(c config) *SourceClient {
	return &SourceClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `source.Hooks(f(g(h())))`.
func (c *SourceClient) Use(hooks ...Hook) {
	c.hooks.Source = append(c.hooks.Source, hooks...)
}

// Create returns a create builder for Source.
func (c *SourceClient) Create() *SourceCreate {
	mutation := newSourceMutation(c.config, OpCreate)
	return &SourceCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of Source entities.
func (c *SourceClient) CreateBulk(builders ...*SourceCreate) *SourceCreateBulk {
	return &SourceCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Source.
func (c *SourceClient) Update() *SourceUpdate {
	mutation := newSourceMutation(c.config, OpUpdate)
	return &SourceUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SourceClient) UpdateOne(s *Source) *SourceUpdateOne {
	mutation := newSourceMutation(c.config, OpUpdateOne, withSource(s))
	return &SourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SourceClient) UpdateOneID(id int) *SourceUpdateOne {
	mutation := newSourceMutation(c.config, OpUpdateOne, withSourceID(id))
	return &SourceUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Source.
func (c *SourceClient) Delete() *SourceDelete {
	mutation := newSourceMutation(c.config, OpDelete)
	return &SourceDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SourceClient) DeleteOne(s *Source) *SourceDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SourceClient) DeleteOneID(id int) *SourceDeleteOne {
	builder := c.Delete().Where(source.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SourceDeleteOne{builder}
}

// Query returns a query builder for Source.
func (c *SourceClient) Query() *SourceQuery {
	return &SourceQuery{config: c.config}
}

// Get returns a Source entity by its id.
func (c *SourceClient) Get(ctx context.Context, id int) (*Source, error) {
	return c.Query().Where(source.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SourceClient) GetX(ctx context.Context, id int) *Source {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySOURCERECORD queries the SOURCE_RECORD edge of a Source.
func (c *SourceClient) QuerySOURCERECORD(s *Source) *RecordfoodQuery {
	query := &RecordfoodQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(source.Table, source.FieldID, id),
			sqlgraph.To(recordfood.Table, recordfood.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, source.SOURCERECORDTable, source.SOURCERECORDColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SourceClient) Hooks() []Hook {
	return c.hooks.Source
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// BulkCreate returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{config: c.config}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUSERRECORD queries the USER_RECORD edge of a User.
func (c *UserClient) QueryUSERRECORD(u *User) *RecordfoodQuery {
	query := &RecordfoodQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(recordfood.Table, recordfood.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.USERRECORDTable, user.USERRECORDColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
