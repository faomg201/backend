// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/faomg201/app/ent/foodmenu"
	"github.com/faomg201/app/ent/mainingre"
	"github.com/faomg201/app/ent/predicate"
	"github.com/faomg201/app/ent/recordfood"
	"github.com/faomg201/app/ent/source"
	"github.com/faomg201/app/ent/user"
)

// RecordfoodUpdate is the builder for updating Recordfood entities.
type RecordfoodUpdate struct {
	config
	hooks      []Hook
	mutation   *RecordfoodMutation
	predicates []predicate.Recordfood
}

// Where adds a new predicate for the builder.
func (ru *RecordfoodUpdate) Where(ps ...predicate.Recordfood) *RecordfoodUpdate {
	ru.predicates = append(ru.predicates, ps...)
	return ru
}

// SetRECORDUSERID sets the RECORD_USER edge to User by id.
func (ru *RecordfoodUpdate) SetRECORDUSERID(id int) *RecordfoodUpdate {
	ru.mutation.SetRECORDUSERID(id)
	return ru
}

// SetNillableRECORDUSERID sets the RECORD_USER edge to User by id if the given value is not nil.
func (ru *RecordfoodUpdate) SetNillableRECORDUSERID(id *int) *RecordfoodUpdate {
	if id != nil {
		ru = ru.SetRECORDUSERID(*id)
	}
	return ru
}

// SetRECORDUSER sets the RECORD_USER edge to User.
func (ru *RecordfoodUpdate) SetRECORDUSER(u *User) *RecordfoodUpdate {
	return ru.SetRECORDUSERID(u.ID)
}

// SetRECORDFOODMENUID sets the RECORD_FOODMENU edge to FOODMENU by id.
func (ru *RecordfoodUpdate) SetRECORDFOODMENUID(id int) *RecordfoodUpdate {
	ru.mutation.SetRECORDFOODMENUID(id)
	return ru
}

// SetNillableRECORDFOODMENUID sets the RECORD_FOODMENU edge to FOODMENU by id if the given value is not nil.
func (ru *RecordfoodUpdate) SetNillableRECORDFOODMENUID(id *int) *RecordfoodUpdate {
	if id != nil {
		ru = ru.SetRECORDFOODMENUID(*id)
	}
	return ru
}

// SetRECORDFOODMENU sets the RECORD_FOODMENU edge to FOODMENU.
func (ru *RecordfoodUpdate) SetRECORDFOODMENU(f *FOODMENU) *RecordfoodUpdate {
	return ru.SetRECORDFOODMENUID(f.ID)
}

// SetRECORDINGREDIENTID sets the RECORD_INGREDIENT edge to Mainingre by id.
func (ru *RecordfoodUpdate) SetRECORDINGREDIENTID(id int) *RecordfoodUpdate {
	ru.mutation.SetRECORDINGREDIENTID(id)
	return ru
}

// SetNillableRECORDINGREDIENTID sets the RECORD_INGREDIENT edge to Mainingre by id if the given value is not nil.
func (ru *RecordfoodUpdate) SetNillableRECORDINGREDIENTID(id *int) *RecordfoodUpdate {
	if id != nil {
		ru = ru.SetRECORDINGREDIENTID(*id)
	}
	return ru
}

// SetRECORDINGREDIENT sets the RECORD_INGREDIENT edge to Mainingre.
func (ru *RecordfoodUpdate) SetRECORDINGREDIENT(m *Mainingre) *RecordfoodUpdate {
	return ru.SetRECORDINGREDIENTID(m.ID)
}

// SetRECORDSOURCEID sets the RECORD_SOURCE edge to Source by id.
func (ru *RecordfoodUpdate) SetRECORDSOURCEID(id int) *RecordfoodUpdate {
	ru.mutation.SetRECORDSOURCEID(id)
	return ru
}

// SetNillableRECORDSOURCEID sets the RECORD_SOURCE edge to Source by id if the given value is not nil.
func (ru *RecordfoodUpdate) SetNillableRECORDSOURCEID(id *int) *RecordfoodUpdate {
	if id != nil {
		ru = ru.SetRECORDSOURCEID(*id)
	}
	return ru
}

// SetRECORDSOURCE sets the RECORD_SOURCE edge to Source.
func (ru *RecordfoodUpdate) SetRECORDSOURCE(s *Source) *RecordfoodUpdate {
	return ru.SetRECORDSOURCEID(s.ID)
}

// Mutation returns the RecordfoodMutation object of the builder.
func (ru *RecordfoodUpdate) Mutation() *RecordfoodMutation {
	return ru.mutation
}

// ClearRECORDUSER clears the "RECORD_USER" edge to type User.
func (ru *RecordfoodUpdate) ClearRECORDUSER() *RecordfoodUpdate {
	ru.mutation.ClearRECORDUSER()
	return ru
}

// ClearRECORDFOODMENU clears the "RECORD_FOODMENU" edge to type FOODMENU.
func (ru *RecordfoodUpdate) ClearRECORDFOODMENU() *RecordfoodUpdate {
	ru.mutation.ClearRECORDFOODMENU()
	return ru
}

// ClearRECORDINGREDIENT clears the "RECORD_INGREDIENT" edge to type Mainingre.
func (ru *RecordfoodUpdate) ClearRECORDINGREDIENT() *RecordfoodUpdate {
	ru.mutation.ClearRECORDINGREDIENT()
	return ru
}

// ClearRECORDSOURCE clears the "RECORD_SOURCE" edge to type Source.
func (ru *RecordfoodUpdate) ClearRECORDSOURCE() *RecordfoodUpdate {
	ru.mutation.ClearRECORDSOURCE()
	return ru
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (ru *RecordfoodUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecordfoodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RecordfoodUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RecordfoodUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RecordfoodUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RecordfoodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   recordfood.Table,
			Columns: recordfood.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: recordfood.FieldID,
			},
		},
	}
	if ps := ru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ru.mutation.RECORDUSERCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordfood.RECORDUSERTable,
			Columns: []string{recordfood.RECORDUSERColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RECORDUSERIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordfood.RECORDUSERTable,
			Columns: []string{recordfood.RECORDUSERColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.RECORDFOODMENUCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordfood.RECORDFOODMENUTable,
			Columns: []string{recordfood.RECORDFOODMENUColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: foodmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RECORDFOODMENUIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordfood.RECORDFOODMENUTable,
			Columns: []string{recordfood.RECORDFOODMENUColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: foodmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.RECORDINGREDIENTCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordfood.RECORDINGREDIENTTable,
			Columns: []string{recordfood.RECORDINGREDIENTColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: mainingre.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RECORDINGREDIENTIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordfood.RECORDINGREDIENTTable,
			Columns: []string{recordfood.RECORDINGREDIENTColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: mainingre.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.RECORDSOURCECleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordfood.RECORDSOURCETable,
			Columns: []string{recordfood.RECORDSOURCEColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: source.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RECORDSOURCEIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordfood.RECORDSOURCETable,
			Columns: []string{recordfood.RECORDSOURCEColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: source.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recordfood.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RecordfoodUpdateOne is the builder for updating a single Recordfood entity.
type RecordfoodUpdateOne struct {
	config
	hooks    []Hook
	mutation *RecordfoodMutation
}

// SetRECORDUSERID sets the RECORD_USER edge to User by id.
func (ruo *RecordfoodUpdateOne) SetRECORDUSERID(id int) *RecordfoodUpdateOne {
	ruo.mutation.SetRECORDUSERID(id)
	return ruo
}

// SetNillableRECORDUSERID sets the RECORD_USER edge to User by id if the given value is not nil.
func (ruo *RecordfoodUpdateOne) SetNillableRECORDUSERID(id *int) *RecordfoodUpdateOne {
	if id != nil {
		ruo = ruo.SetRECORDUSERID(*id)
	}
	return ruo
}

// SetRECORDUSER sets the RECORD_USER edge to User.
func (ruo *RecordfoodUpdateOne) SetRECORDUSER(u *User) *RecordfoodUpdateOne {
	return ruo.SetRECORDUSERID(u.ID)
}

// SetRECORDFOODMENUID sets the RECORD_FOODMENU edge to FOODMENU by id.
func (ruo *RecordfoodUpdateOne) SetRECORDFOODMENUID(id int) *RecordfoodUpdateOne {
	ruo.mutation.SetRECORDFOODMENUID(id)
	return ruo
}

// SetNillableRECORDFOODMENUID sets the RECORD_FOODMENU edge to FOODMENU by id if the given value is not nil.
func (ruo *RecordfoodUpdateOne) SetNillableRECORDFOODMENUID(id *int) *RecordfoodUpdateOne {
	if id != nil {
		ruo = ruo.SetRECORDFOODMENUID(*id)
	}
	return ruo
}

// SetRECORDFOODMENU sets the RECORD_FOODMENU edge to FOODMENU.
func (ruo *RecordfoodUpdateOne) SetRECORDFOODMENU(f *FOODMENU) *RecordfoodUpdateOne {
	return ruo.SetRECORDFOODMENUID(f.ID)
}

// SetRECORDINGREDIENTID sets the RECORD_INGREDIENT edge to Mainingre by id.
func (ruo *RecordfoodUpdateOne) SetRECORDINGREDIENTID(id int) *RecordfoodUpdateOne {
	ruo.mutation.SetRECORDINGREDIENTID(id)
	return ruo
}

// SetNillableRECORDINGREDIENTID sets the RECORD_INGREDIENT edge to Mainingre by id if the given value is not nil.
func (ruo *RecordfoodUpdateOne) SetNillableRECORDINGREDIENTID(id *int) *RecordfoodUpdateOne {
	if id != nil {
		ruo = ruo.SetRECORDINGREDIENTID(*id)
	}
	return ruo
}

// SetRECORDINGREDIENT sets the RECORD_INGREDIENT edge to Mainingre.
func (ruo *RecordfoodUpdateOne) SetRECORDINGREDIENT(m *Mainingre) *RecordfoodUpdateOne {
	return ruo.SetRECORDINGREDIENTID(m.ID)
}

// SetRECORDSOURCEID sets the RECORD_SOURCE edge to Source by id.
func (ruo *RecordfoodUpdateOne) SetRECORDSOURCEID(id int) *RecordfoodUpdateOne {
	ruo.mutation.SetRECORDSOURCEID(id)
	return ruo
}

// SetNillableRECORDSOURCEID sets the RECORD_SOURCE edge to Source by id if the given value is not nil.
func (ruo *RecordfoodUpdateOne) SetNillableRECORDSOURCEID(id *int) *RecordfoodUpdateOne {
	if id != nil {
		ruo = ruo.SetRECORDSOURCEID(*id)
	}
	return ruo
}

// SetRECORDSOURCE sets the RECORD_SOURCE edge to Source.
func (ruo *RecordfoodUpdateOne) SetRECORDSOURCE(s *Source) *RecordfoodUpdateOne {
	return ruo.SetRECORDSOURCEID(s.ID)
}

// Mutation returns the RecordfoodMutation object of the builder.
func (ruo *RecordfoodUpdateOne) Mutation() *RecordfoodMutation {
	return ruo.mutation
}

// ClearRECORDUSER clears the "RECORD_USER" edge to type User.
func (ruo *RecordfoodUpdateOne) ClearRECORDUSER() *RecordfoodUpdateOne {
	ruo.mutation.ClearRECORDUSER()
	return ruo
}

// ClearRECORDFOODMENU clears the "RECORD_FOODMENU" edge to type FOODMENU.
func (ruo *RecordfoodUpdateOne) ClearRECORDFOODMENU() *RecordfoodUpdateOne {
	ruo.mutation.ClearRECORDFOODMENU()
	return ruo
}

// ClearRECORDINGREDIENT clears the "RECORD_INGREDIENT" edge to type Mainingre.
func (ruo *RecordfoodUpdateOne) ClearRECORDINGREDIENT() *RecordfoodUpdateOne {
	ruo.mutation.ClearRECORDINGREDIENT()
	return ruo
}

// ClearRECORDSOURCE clears the "RECORD_SOURCE" edge to type Source.
func (ruo *RecordfoodUpdateOne) ClearRECORDSOURCE() *RecordfoodUpdateOne {
	ruo.mutation.ClearRECORDSOURCE()
	return ruo
}

// Save executes the query and returns the updated entity.
func (ruo *RecordfoodUpdateOne) Save(ctx context.Context) (*Recordfood, error) {
	var (
		err  error
		node *Recordfood
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecordfoodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RecordfoodUpdateOne) SaveX(ctx context.Context) *Recordfood {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RecordfoodUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RecordfoodUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RecordfoodUpdateOne) sqlSave(ctx context.Context) (_node *Recordfood, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   recordfood.Table,
			Columns: recordfood.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: recordfood.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Recordfood.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ruo.mutation.RECORDUSERCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordfood.RECORDUSERTable,
			Columns: []string{recordfood.RECORDUSERColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RECORDUSERIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordfood.RECORDUSERTable,
			Columns: []string{recordfood.RECORDUSERColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.RECORDFOODMENUCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordfood.RECORDFOODMENUTable,
			Columns: []string{recordfood.RECORDFOODMENUColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: foodmenu.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RECORDFOODMENUIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordfood.RECORDFOODMENUTable,
			Columns: []string{recordfood.RECORDFOODMENUColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: foodmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.RECORDINGREDIENTCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordfood.RECORDINGREDIENTTable,
			Columns: []string{recordfood.RECORDINGREDIENTColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: mainingre.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RECORDINGREDIENTIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordfood.RECORDINGREDIENTTable,
			Columns: []string{recordfood.RECORDINGREDIENTColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: mainingre.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.RECORDSOURCECleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordfood.RECORDSOURCETable,
			Columns: []string{recordfood.RECORDSOURCEColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: source.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RECORDSOURCEIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordfood.RECORDSOURCETable,
			Columns: []string{recordfood.RECORDSOURCEColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: source.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Recordfood{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{recordfood.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
