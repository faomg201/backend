// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/faomg201/app/ent/mainingre"
)

// Mainingre is the model entity for the Mainingre schema.
type Mainingre struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MAININGREDIENTNAME holds the value of the "MAIN_INGREDIENT_NAME" field.
	MAININGREDIENTNAME string `json:"MAIN_INGREDIENT_NAME,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MainingreQuery when eager-loading is set.
	Edges MainingreEdges `json:"edges"`
}

// MainingreEdges holds the relations/edges for other nodes in the graph.
type MainingreEdges struct {
	// MAININGRERECORD holds the value of the MAININGRE_RECORD edge.
	MAININGRERECORD []*Recordfood
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// MAININGRERECORDOrErr returns the MAININGRERECORD value or an error if the edge
// was not loaded in eager-loading.
func (e MainingreEdges) MAININGRERECORDOrErr() ([]*Recordfood, error) {
	if e.loadedTypes[0] {
		return e.MAININGRERECORD, nil
	}
	return nil, &NotLoadedError{edge: "MAININGRE_RECORD"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Mainingre) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // MAIN_INGREDIENT_NAME
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Mainingre fields.
func (m *Mainingre) assignValues(values ...interface{}) error {
	if m, n := len(values), len(mainingre.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	m.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field MAIN_INGREDIENT_NAME", values[0])
	} else if value.Valid {
		m.MAININGREDIENTNAME = value.String
	}
	return nil
}

// QueryMAININGRERECORD queries the MAININGRE_RECORD edge of the Mainingre.
func (m *Mainingre) QueryMAININGRERECORD() *RecordfoodQuery {
	return (&MainingreClient{config: m.config}).QueryMAININGRERECORD(m)
}

// Update returns a builder for updating this Mainingre.
// Note that, you need to call Mainingre.Unwrap() before calling this method, if this Mainingre
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Mainingre) Update() *MainingreUpdateOne {
	return (&MainingreClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (m *Mainingre) Unwrap() *Mainingre {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Mainingre is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Mainingre) String() string {
	var builder strings.Builder
	builder.WriteString("Mainingre(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", MAIN_INGREDIENT_NAME=")
	builder.WriteString(m.MAININGREDIENTNAME)
	builder.WriteByte(')')
	return builder.String()
}

// Mainingres is a parsable slice of Mainingre.
type Mainingres []*Mainingre

func (m Mainingres) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
