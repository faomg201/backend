// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"github.com/facebook/ent/dialect/sql/schema"
	"github.com/facebook/ent/schema/field"
)

var (
	// FoodmenUsColumns holds the columns for the "foodmen_us" table.
	FoodmenUsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "foodmenu_name", Type: field.TypeString},
	}
	// FoodmenUsTable holds the schema information for the "foodmen_us" table.
	FoodmenUsTable = &schema.Table{
		Name:        "foodmen_us",
		Columns:     FoodmenUsColumns,
		PrimaryKey:  []*schema.Column{FoodmenUsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// MainingresColumns holds the columns for the "mainingres" table.
	MainingresColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "main_ingredient_name", Type: field.TypeString},
	}
	// MainingresTable holds the schema information for the "mainingres" table.
	MainingresTable = &schema.Table{
		Name:        "mainingres",
		Columns:     MainingresColumns,
		PrimaryKey:  []*schema.Column{MainingresColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// RecordfoodsColumns holds the columns for the "recordfoods" table.
	RecordfoodsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "foodmenu_foodmenu_record", Type: field.TypeInt, Nullable: true},
		{Name: "mainingre_mainingre_record", Type: field.TypeInt, Nullable: true},
		{Name: "source_source_record", Type: field.TypeInt, Nullable: true},
		{Name: "user_user_record", Type: field.TypeInt, Nullable: true},
	}
	// RecordfoodsTable holds the schema information for the "recordfoods" table.
	RecordfoodsTable = &schema.Table{
		Name:       "recordfoods",
		Columns:    RecordfoodsColumns,
		PrimaryKey: []*schema.Column{RecordfoodsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "recordfoods_foodmen_us_FOODMENU_RECORD",
				Columns: []*schema.Column{RecordfoodsColumns[1]},

				RefColumns: []*schema.Column{FoodmenUsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "recordfoods_mainingres_MAININGRE_RECORD",
				Columns: []*schema.Column{RecordfoodsColumns[2]},

				RefColumns: []*schema.Column{MainingresColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "recordfoods_sources_SOURCE_RECORD",
				Columns: []*schema.Column{RecordfoodsColumns[3]},

				RefColumns: []*schema.Column{SourcesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "recordfoods_users_USER_RECORD",
				Columns: []*schema.Column{RecordfoodsColumns[4]},

				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// SourcesColumns holds the columns for the "sources" table.
	SourcesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "source_name", Type: field.TypeString},
		{Name: "source_address", Type: field.TypeString},
		{Name: "source_tle", Type: field.TypeString},
	}
	// SourcesTable holds the schema information for the "sources" table.
	SourcesTable = &schema.Table{
		Name:        "sources",
		Columns:     SourcesColumns,
		PrimaryKey:  []*schema.Column{SourcesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_email", Type: field.TypeString},
		{Name: "user_name", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:        "users",
		Columns:     UsersColumns,
		PrimaryKey:  []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		FoodmenUsTable,
		MainingresTable,
		RecordfoodsTable,
		SourcesTable,
		UsersTable,
	}
)

func init() {
	RecordfoodsTable.ForeignKeys[0].RefTable = FoodmenUsTable
	RecordfoodsTable.ForeignKeys[1].RefTable = MainingresTable
	RecordfoodsTable.ForeignKeys[2].RefTable = SourcesTable
	RecordfoodsTable.ForeignKeys[3].RefTable = UsersTable
}
