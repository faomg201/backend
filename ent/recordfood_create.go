// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/faomg201/app/ent/foodmenu"
	"github.com/faomg201/app/ent/mainingre"
	"github.com/faomg201/app/ent/recordfood"
	"github.com/faomg201/app/ent/source"
	"github.com/faomg201/app/ent/user"
)

// RecordfoodCreate is the builder for creating a Recordfood entity.
type RecordfoodCreate struct {
	config
	mutation *RecordfoodMutation
	hooks    []Hook
}

// SetRECORDUSERID sets the RECORD_USER edge to User by id.
func (rc *RecordfoodCreate) SetRECORDUSERID(id int) *RecordfoodCreate {
	rc.mutation.SetRECORDUSERID(id)
	return rc
}

// SetNillableRECORDUSERID sets the RECORD_USER edge to User by id if the given value is not nil.
func (rc *RecordfoodCreate) SetNillableRECORDUSERID(id *int) *RecordfoodCreate {
	if id != nil {
		rc = rc.SetRECORDUSERID(*id)
	}
	return rc
}

// SetRECORDUSER sets the RECORD_USER edge to User.
func (rc *RecordfoodCreate) SetRECORDUSER(u *User) *RecordfoodCreate {
	return rc.SetRECORDUSERID(u.ID)
}

// SetRECORDFOODMENUID sets the RECORD_FOODMENU edge to FOODMENU by id.
func (rc *RecordfoodCreate) SetRECORDFOODMENUID(id int) *RecordfoodCreate {
	rc.mutation.SetRECORDFOODMENUID(id)
	return rc
}

// SetNillableRECORDFOODMENUID sets the RECORD_FOODMENU edge to FOODMENU by id if the given value is not nil.
func (rc *RecordfoodCreate) SetNillableRECORDFOODMENUID(id *int) *RecordfoodCreate {
	if id != nil {
		rc = rc.SetRECORDFOODMENUID(*id)
	}
	return rc
}

// SetRECORDFOODMENU sets the RECORD_FOODMENU edge to FOODMENU.
func (rc *RecordfoodCreate) SetRECORDFOODMENU(f *FOODMENU) *RecordfoodCreate {
	return rc.SetRECORDFOODMENUID(f.ID)
}

// SetRECORDINGREDIENTID sets the RECORD_INGREDIENT edge to Mainingre by id.
func (rc *RecordfoodCreate) SetRECORDINGREDIENTID(id int) *RecordfoodCreate {
	rc.mutation.SetRECORDINGREDIENTID(id)
	return rc
}

// SetNillableRECORDINGREDIENTID sets the RECORD_INGREDIENT edge to Mainingre by id if the given value is not nil.
func (rc *RecordfoodCreate) SetNillableRECORDINGREDIENTID(id *int) *RecordfoodCreate {
	if id != nil {
		rc = rc.SetRECORDINGREDIENTID(*id)
	}
	return rc
}

// SetRECORDINGREDIENT sets the RECORD_INGREDIENT edge to Mainingre.
func (rc *RecordfoodCreate) SetRECORDINGREDIENT(m *Mainingre) *RecordfoodCreate {
	return rc.SetRECORDINGREDIENTID(m.ID)
}

// SetRECORDSOURCEID sets the RECORD_SOURCE edge to Source by id.
func (rc *RecordfoodCreate) SetRECORDSOURCEID(id int) *RecordfoodCreate {
	rc.mutation.SetRECORDSOURCEID(id)
	return rc
}

// SetNillableRECORDSOURCEID sets the RECORD_SOURCE edge to Source by id if the given value is not nil.
func (rc *RecordfoodCreate) SetNillableRECORDSOURCEID(id *int) *RecordfoodCreate {
	if id != nil {
		rc = rc.SetRECORDSOURCEID(*id)
	}
	return rc
}

// SetRECORDSOURCE sets the RECORD_SOURCE edge to Source.
func (rc *RecordfoodCreate) SetRECORDSOURCE(s *Source) *RecordfoodCreate {
	return rc.SetRECORDSOURCEID(s.ID)
}

// Mutation returns the RecordfoodMutation object of the builder.
func (rc *RecordfoodCreate) Mutation() *RecordfoodMutation {
	return rc.mutation
}

// Save creates the Recordfood in the database.
func (rc *RecordfoodCreate) Save(ctx context.Context) (*Recordfood, error) {
	var (
		err  error
		node *Recordfood
	)
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecordfoodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			node, err = rc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RecordfoodCreate) SaveX(ctx context.Context) *Recordfood {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (rc *RecordfoodCreate) check() error {
	return nil
}

func (rc *RecordfoodCreate) sqlSave(ctx context.Context) (*Recordfood, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rc *RecordfoodCreate) createSpec() (*Recordfood, *sqlgraph.CreateSpec) {
	var (
		_node = &Recordfood{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: recordfood.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: recordfood.FieldID,
			},
		}
	)
	if nodes := rc.mutation.RECORDUSERIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordfood.RECORDUSERTable,
			Columns: []string{recordfood.RECORDUSERColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RECORDFOODMENUIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordfood.RECORDFOODMENUTable,
			Columns: []string{recordfood.RECORDFOODMENUColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: foodmenu.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RECORDINGREDIENTIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordfood.RECORDINGREDIENTTable,
			Columns: []string{recordfood.RECORDINGREDIENTColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: mainingre.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.RECORDSOURCEIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   recordfood.RECORDSOURCETable,
			Columns: []string{recordfood.RECORDSOURCEColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: source.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RecordfoodCreateBulk is the builder for creating a bulk of Recordfood entities.
type RecordfoodCreateBulk struct {
	config
	builders []*RecordfoodCreate
}

// Save creates the Recordfood entities in the database.
func (rcb *RecordfoodCreateBulk) Save(ctx context.Context) ([]*Recordfood, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Recordfood, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RecordfoodMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (rcb *RecordfoodCreateBulk) SaveX(ctx context.Context) []*Recordfood {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
