// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/faomg201/app/ent/recordfood"
	"github.com/faomg201/app/ent/source"
)

// SourceCreate is the builder for creating a Source entity.
type SourceCreate struct {
	config
	mutation *SourceMutation
	hooks    []Hook
}

// SetSOURCENAME sets the SOURCE_NAME field.
func (sc *SourceCreate) SetSOURCENAME(s string) *SourceCreate {
	sc.mutation.SetSOURCENAME(s)
	return sc
}

// SetSOURCEADDRESS sets the SOURCE_ADDRESS field.
func (sc *SourceCreate) SetSOURCEADDRESS(s string) *SourceCreate {
	sc.mutation.SetSOURCEADDRESS(s)
	return sc
}

// SetSOURCETLE sets the SOURCE_TLE field.
func (sc *SourceCreate) SetSOURCETLE(s string) *SourceCreate {
	sc.mutation.SetSOURCETLE(s)
	return sc
}

// AddSOURCERECORDIDs adds the SOURCE_RECORD edge to Recordfood by ids.
func (sc *SourceCreate) AddSOURCERECORDIDs(ids ...int) *SourceCreate {
	sc.mutation.AddSOURCERECORDIDs(ids...)
	return sc
}

// AddSOURCERECORD adds the SOURCE_RECORD edges to Recordfood.
func (sc *SourceCreate) AddSOURCERECORD(r ...*Recordfood) *SourceCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return sc.AddSOURCERECORDIDs(ids...)
}

// Mutation returns the SourceMutation object of the builder.
func (sc *SourceCreate) Mutation() *SourceMutation {
	return sc.mutation
}

// Save creates the Source in the database.
func (sc *SourceCreate) Save(ctx context.Context) (*Source, error) {
	var (
		err  error
		node *Source
	)
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			node, err = sc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SourceCreate) SaveX(ctx context.Context) *Source {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (sc *SourceCreate) check() error {
	if _, ok := sc.mutation.SOURCENAME(); !ok {
		return &ValidationError{Name: "SOURCE_NAME", err: errors.New("ent: missing required field \"SOURCE_NAME\"")}
	}
	if _, ok := sc.mutation.SOURCEADDRESS(); !ok {
		return &ValidationError{Name: "SOURCE_ADDRESS", err: errors.New("ent: missing required field \"SOURCE_ADDRESS\"")}
	}
	if _, ok := sc.mutation.SOURCETLE(); !ok {
		return &ValidationError{Name: "SOURCE_TLE", err: errors.New("ent: missing required field \"SOURCE_TLE\"")}
	}
	return nil
}

func (sc *SourceCreate) sqlSave(ctx context.Context) (*Source, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sc *SourceCreate) createSpec() (*Source, *sqlgraph.CreateSpec) {
	var (
		_node = &Source{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: source.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: source.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.SOURCENAME(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldSOURCENAME,
		})
		_node.SOURCENAME = value
	}
	if value, ok := sc.mutation.SOURCEADDRESS(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldSOURCEADDRESS,
		})
		_node.SOURCEADDRESS = value
	}
	if value, ok := sc.mutation.SOURCETLE(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldSOURCETLE,
		})
		_node.SOURCETLE = value
	}
	if nodes := sc.mutation.SOURCERECORDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   source.SOURCERECORDTable,
			Columns: []string{source.SOURCERECORDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordfood.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SourceCreateBulk is the builder for creating a bulk of Source entities.
type SourceCreateBulk struct {
	config
	builders []*SourceCreate
}

// Save creates the Source entities in the database.
func (scb *SourceCreateBulk) Save(ctx context.Context) ([]*Source, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Source, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SourceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (scb *SourceCreateBulk) SaveX(ctx context.Context) []*Source {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
