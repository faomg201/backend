// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/faomg201/app/ent/mainingre"
	"github.com/faomg201/app/ent/recordfood"
)

// MainingreCreate is the builder for creating a Mainingre entity.
type MainingreCreate struct {
	config
	mutation *MainingreMutation
	hooks    []Hook
}

// SetMAININGREDIENTNAME sets the MAIN_INGREDIENT_NAME field.
func (mc *MainingreCreate) SetMAININGREDIENTNAME(s string) *MainingreCreate {
	mc.mutation.SetMAININGREDIENTNAME(s)
	return mc
}

// AddMAININGRERECORDIDs adds the MAININGRE_RECORD edge to Recordfood by ids.
func (mc *MainingreCreate) AddMAININGRERECORDIDs(ids ...int) *MainingreCreate {
	mc.mutation.AddMAININGRERECORDIDs(ids...)
	return mc
}

// AddMAININGRERECORD adds the MAININGRE_RECORD edges to Recordfood.
func (mc *MainingreCreate) AddMAININGRERECORD(r ...*Recordfood) *MainingreCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return mc.AddMAININGRERECORDIDs(ids...)
}

// Mutation returns the MainingreMutation object of the builder.
func (mc *MainingreCreate) Mutation() *MainingreMutation {
	return mc.mutation
}

// Save creates the Mainingre in the database.
func (mc *MainingreCreate) Save(ctx context.Context) (*Mainingre, error) {
	var (
		err  error
		node *Mainingre
	)
	if len(mc.hooks) == 0 {
		if err = mc.check(); err != nil {
			return nil, err
		}
		node, err = mc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MainingreMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mc.check(); err != nil {
				return nil, err
			}
			mc.mutation = mutation
			node, err = mc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(mc.hooks) - 1; i >= 0; i-- {
			mut = mc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MainingreCreate) SaveX(ctx context.Context) *Mainingre {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (mc *MainingreCreate) check() error {
	if _, ok := mc.mutation.MAININGREDIENTNAME(); !ok {
		return &ValidationError{Name: "MAIN_INGREDIENT_NAME", err: errors.New("ent: missing required field \"MAIN_INGREDIENT_NAME\"")}
	}
	return nil
}

func (mc *MainingreCreate) sqlSave(ctx context.Context) (*Mainingre, error) {
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mc *MainingreCreate) createSpec() (*Mainingre, *sqlgraph.CreateSpec) {
	var (
		_node = &Mainingre{config: mc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: mainingre.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: mainingre.FieldID,
			},
		}
	)
	if value, ok := mc.mutation.MAININGREDIENTNAME(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: mainingre.FieldMAININGREDIENTNAME,
		})
		_node.MAININGREDIENTNAME = value
	}
	if nodes := mc.mutation.MAININGRERECORDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   mainingre.MAININGRERECORDTable,
			Columns: []string{mainingre.MAININGRERECORDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordfood.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// MainingreCreateBulk is the builder for creating a bulk of Mainingre entities.
type MainingreCreateBulk struct {
	config
	builders []*MainingreCreate
}

// Save creates the Mainingre entities in the database.
func (mcb *MainingreCreateBulk) Save(ctx context.Context) ([]*Mainingre, error) {
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Mainingre, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MainingreMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (mcb *MainingreCreateBulk) SaveX(ctx context.Context) []*Mainingre {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
