// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/faomg201/app/ent/foodmenu"
	"github.com/faomg201/app/ent/predicate"
	"github.com/faomg201/app/ent/recordfood"
)

// FOODMENUUpdate is the builder for updating FOODMENU entities.
type FOODMENUUpdate struct {
	config
	hooks      []Hook
	mutation   *FOODMENUMutation
	predicates []predicate.FOODMENU
}

// Where adds a new predicate for the builder.
func (fu *FOODMENUUpdate) Where(ps ...predicate.FOODMENU) *FOODMENUUpdate {
	fu.predicates = append(fu.predicates, ps...)
	return fu
}

// SetFOODMENUNAME sets the FOODMENU_NAME field.
func (fu *FOODMENUUpdate) SetFOODMENUNAME(s string) *FOODMENUUpdate {
	fu.mutation.SetFOODMENUNAME(s)
	return fu
}

// AddFOODMENURECORDIDs adds the FOODMENU_RECORD edge to Recordfood by ids.
func (fu *FOODMENUUpdate) AddFOODMENURECORDIDs(ids ...int) *FOODMENUUpdate {
	fu.mutation.AddFOODMENURECORDIDs(ids...)
	return fu
}

// AddFOODMENURECORD adds the FOODMENU_RECORD edges to Recordfood.
func (fu *FOODMENUUpdate) AddFOODMENURECORD(r ...*Recordfood) *FOODMENUUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return fu.AddFOODMENURECORDIDs(ids...)
}

// Mutation returns the FOODMENUMutation object of the builder.
func (fu *FOODMENUUpdate) Mutation() *FOODMENUMutation {
	return fu.mutation
}

// ClearFOODMENURECORD clears all "FOODMENU_RECORD" edges to type Recordfood.
func (fu *FOODMENUUpdate) ClearFOODMENURECORD() *FOODMENUUpdate {
	fu.mutation.ClearFOODMENURECORD()
	return fu
}

// RemoveFOODMENURECORDIDs removes the FOODMENU_RECORD edge to Recordfood by ids.
func (fu *FOODMENUUpdate) RemoveFOODMENURECORDIDs(ids ...int) *FOODMENUUpdate {
	fu.mutation.RemoveFOODMENURECORDIDs(ids...)
	return fu
}

// RemoveFOODMENURECORD removes FOODMENU_RECORD edges to Recordfood.
func (fu *FOODMENUUpdate) RemoveFOODMENURECORD(r ...*Recordfood) *FOODMENUUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return fu.RemoveFOODMENURECORDIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (fu *FOODMENUUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fu.hooks) == 0 {
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FOODMENUMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FOODMENUUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FOODMENUUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FOODMENUUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fu *FOODMENUUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   foodmenu.Table,
			Columns: foodmenu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: foodmenu.FieldID,
			},
		},
	}
	if ps := fu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.FOODMENUNAME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: foodmenu.FieldFOODMENUNAME,
		})
	}
	if fu.mutation.FOODMENURECORDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   foodmenu.FOODMENURECORDTable,
			Columns: []string{foodmenu.FOODMENURECORDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordfood.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedFOODMENURECORDIDs(); len(nodes) > 0 && !fu.mutation.FOODMENURECORDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   foodmenu.FOODMENURECORDTable,
			Columns: []string{foodmenu.FOODMENURECORDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordfood.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.FOODMENURECORDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   foodmenu.FOODMENURECORDTable,
			Columns: []string{foodmenu.FOODMENURECORDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordfood.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{foodmenu.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// FOODMENUUpdateOne is the builder for updating a single FOODMENU entity.
type FOODMENUUpdateOne struct {
	config
	hooks    []Hook
	mutation *FOODMENUMutation
}

// SetFOODMENUNAME sets the FOODMENU_NAME field.
func (fuo *FOODMENUUpdateOne) SetFOODMENUNAME(s string) *FOODMENUUpdateOne {
	fuo.mutation.SetFOODMENUNAME(s)
	return fuo
}

// AddFOODMENURECORDIDs adds the FOODMENU_RECORD edge to Recordfood by ids.
func (fuo *FOODMENUUpdateOne) AddFOODMENURECORDIDs(ids ...int) *FOODMENUUpdateOne {
	fuo.mutation.AddFOODMENURECORDIDs(ids...)
	return fuo
}

// AddFOODMENURECORD adds the FOODMENU_RECORD edges to Recordfood.
func (fuo *FOODMENUUpdateOne) AddFOODMENURECORD(r ...*Recordfood) *FOODMENUUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return fuo.AddFOODMENURECORDIDs(ids...)
}

// Mutation returns the FOODMENUMutation object of the builder.
func (fuo *FOODMENUUpdateOne) Mutation() *FOODMENUMutation {
	return fuo.mutation
}

// ClearFOODMENURECORD clears all "FOODMENU_RECORD" edges to type Recordfood.
func (fuo *FOODMENUUpdateOne) ClearFOODMENURECORD() *FOODMENUUpdateOne {
	fuo.mutation.ClearFOODMENURECORD()
	return fuo
}

// RemoveFOODMENURECORDIDs removes the FOODMENU_RECORD edge to Recordfood by ids.
func (fuo *FOODMENUUpdateOne) RemoveFOODMENURECORDIDs(ids ...int) *FOODMENUUpdateOne {
	fuo.mutation.RemoveFOODMENURECORDIDs(ids...)
	return fuo
}

// RemoveFOODMENURECORD removes FOODMENU_RECORD edges to Recordfood.
func (fuo *FOODMENUUpdateOne) RemoveFOODMENURECORD(r ...*Recordfood) *FOODMENUUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return fuo.RemoveFOODMENURECORDIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (fuo *FOODMENUUpdateOne) Save(ctx context.Context) (*FOODMENU, error) {
	var (
		err  error
		node *FOODMENU
	)
	if len(fuo.hooks) == 0 {
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FOODMENUMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			mut = fuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FOODMENUUpdateOne) SaveX(ctx context.Context) *FOODMENU {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FOODMENUUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FOODMENUUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuo *FOODMENUUpdateOne) sqlSave(ctx context.Context) (_node *FOODMENU, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   foodmenu.Table,
			Columns: foodmenu.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: foodmenu.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing FOODMENU.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := fuo.mutation.FOODMENUNAME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: foodmenu.FieldFOODMENUNAME,
		})
	}
	if fuo.mutation.FOODMENURECORDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   foodmenu.FOODMENURECORDTable,
			Columns: []string{foodmenu.FOODMENURECORDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordfood.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedFOODMENURECORDIDs(); len(nodes) > 0 && !fuo.mutation.FOODMENURECORDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   foodmenu.FOODMENURECORDTable,
			Columns: []string{foodmenu.FOODMENURECORDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordfood.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.FOODMENURECORDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   foodmenu.FOODMENURECORDTable,
			Columns: []string{foodmenu.FOODMENURECORDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordfood.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &FOODMENU{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{foodmenu.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
