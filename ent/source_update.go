// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/faomg201/app/ent/predicate"
	"github.com/faomg201/app/ent/recordfood"
	"github.com/faomg201/app/ent/source"
)

// SourceUpdate is the builder for updating Source entities.
type SourceUpdate struct {
	config
	hooks      []Hook
	mutation   *SourceMutation
	predicates []predicate.Source
}

// Where adds a new predicate for the builder.
func (su *SourceUpdate) Where(ps ...predicate.Source) *SourceUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetSOURCENAME sets the SOURCE_NAME field.
func (su *SourceUpdate) SetSOURCENAME(s string) *SourceUpdate {
	su.mutation.SetSOURCENAME(s)
	return su
}

// SetSOURCEADDRESS sets the SOURCE_ADDRESS field.
func (su *SourceUpdate) SetSOURCEADDRESS(s string) *SourceUpdate {
	su.mutation.SetSOURCEADDRESS(s)
	return su
}

// SetSOURCETLE sets the SOURCE_TLE field.
func (su *SourceUpdate) SetSOURCETLE(s string) *SourceUpdate {
	su.mutation.SetSOURCETLE(s)
	return su
}

// AddSOURCERECORDIDs adds the SOURCE_RECORD edge to Recordfood by ids.
func (su *SourceUpdate) AddSOURCERECORDIDs(ids ...int) *SourceUpdate {
	su.mutation.AddSOURCERECORDIDs(ids...)
	return su
}

// AddSOURCERECORD adds the SOURCE_RECORD edges to Recordfood.
func (su *SourceUpdate) AddSOURCERECORD(r ...*Recordfood) *SourceUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.AddSOURCERECORDIDs(ids...)
}

// Mutation returns the SourceMutation object of the builder.
func (su *SourceUpdate) Mutation() *SourceMutation {
	return su.mutation
}

// ClearSOURCERECORD clears all "SOURCE_RECORD" edges to type Recordfood.
func (su *SourceUpdate) ClearSOURCERECORD() *SourceUpdate {
	su.mutation.ClearSOURCERECORD()
	return su
}

// RemoveSOURCERECORDIDs removes the SOURCE_RECORD edge to Recordfood by ids.
func (su *SourceUpdate) RemoveSOURCERECORDIDs(ids ...int) *SourceUpdate {
	su.mutation.RemoveSOURCERECORDIDs(ids...)
	return su
}

// RemoveSOURCERECORD removes SOURCE_RECORD edges to Recordfood.
func (su *SourceUpdate) RemoveSOURCERECORD(r ...*Recordfood) *SourceUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.RemoveSOURCERECORDIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *SourceUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *SourceUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SourceUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SourceUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *SourceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   source.Table,
			Columns: source.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: source.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.SOURCENAME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldSOURCENAME,
		})
	}
	if value, ok := su.mutation.SOURCEADDRESS(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldSOURCEADDRESS,
		})
	}
	if value, ok := su.mutation.SOURCETLE(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldSOURCETLE,
		})
	}
	if su.mutation.SOURCERECORDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   source.SOURCERECORDTable,
			Columns: []string{source.SOURCERECORDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordfood.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedSOURCERECORDIDs(); len(nodes) > 0 && !su.mutation.SOURCERECORDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   source.SOURCERECORDTable,
			Columns: []string{source.SOURCERECORDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordfood.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SOURCERECORDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   source.SOURCERECORDTable,
			Columns: []string{source.SOURCERECORDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordfood.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{source.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// SourceUpdateOne is the builder for updating a single Source entity.
type SourceUpdateOne struct {
	config
	hooks    []Hook
	mutation *SourceMutation
}

// SetSOURCENAME sets the SOURCE_NAME field.
func (suo *SourceUpdateOne) SetSOURCENAME(s string) *SourceUpdateOne {
	suo.mutation.SetSOURCENAME(s)
	return suo
}

// SetSOURCEADDRESS sets the SOURCE_ADDRESS field.
func (suo *SourceUpdateOne) SetSOURCEADDRESS(s string) *SourceUpdateOne {
	suo.mutation.SetSOURCEADDRESS(s)
	return suo
}

// SetSOURCETLE sets the SOURCE_TLE field.
func (suo *SourceUpdateOne) SetSOURCETLE(s string) *SourceUpdateOne {
	suo.mutation.SetSOURCETLE(s)
	return suo
}

// AddSOURCERECORDIDs adds the SOURCE_RECORD edge to Recordfood by ids.
func (suo *SourceUpdateOne) AddSOURCERECORDIDs(ids ...int) *SourceUpdateOne {
	suo.mutation.AddSOURCERECORDIDs(ids...)
	return suo
}

// AddSOURCERECORD adds the SOURCE_RECORD edges to Recordfood.
func (suo *SourceUpdateOne) AddSOURCERECORD(r ...*Recordfood) *SourceUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.AddSOURCERECORDIDs(ids...)
}

// Mutation returns the SourceMutation object of the builder.
func (suo *SourceUpdateOne) Mutation() *SourceMutation {
	return suo.mutation
}

// ClearSOURCERECORD clears all "SOURCE_RECORD" edges to type Recordfood.
func (suo *SourceUpdateOne) ClearSOURCERECORD() *SourceUpdateOne {
	suo.mutation.ClearSOURCERECORD()
	return suo
}

// RemoveSOURCERECORDIDs removes the SOURCE_RECORD edge to Recordfood by ids.
func (suo *SourceUpdateOne) RemoveSOURCERECORDIDs(ids ...int) *SourceUpdateOne {
	suo.mutation.RemoveSOURCERECORDIDs(ids...)
	return suo
}

// RemoveSOURCERECORD removes SOURCE_RECORD edges to Recordfood.
func (suo *SourceUpdateOne) RemoveSOURCERECORD(r ...*Recordfood) *SourceUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.RemoveSOURCERECORDIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (suo *SourceUpdateOne) Save(ctx context.Context) (*Source, error) {
	var (
		err  error
		node *Source
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SourceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SourceUpdateOne) SaveX(ctx context.Context) *Source {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SourceUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SourceUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *SourceUpdateOne) sqlSave(ctx context.Context) (_node *Source, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   source.Table,
			Columns: source.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: source.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Source.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := suo.mutation.SOURCENAME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldSOURCENAME,
		})
	}
	if value, ok := suo.mutation.SOURCEADDRESS(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldSOURCEADDRESS,
		})
	}
	if value, ok := suo.mutation.SOURCETLE(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: source.FieldSOURCETLE,
		})
	}
	if suo.mutation.SOURCERECORDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   source.SOURCERECORDTable,
			Columns: []string{source.SOURCERECORDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordfood.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedSOURCERECORDIDs(); len(nodes) > 0 && !suo.mutation.SOURCERECORDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   source.SOURCERECORDTable,
			Columns: []string{source.SOURCERECORDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordfood.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SOURCERECORDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   source.SOURCERECORDTable,
			Columns: []string{source.SOURCERECORDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: recordfood.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Source{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{source.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
