// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/faomg201/app/ent/foodmenu"
	"github.com/faomg201/app/ent/mainingre"
	"github.com/faomg201/app/ent/recordfood"
	"github.com/faomg201/app/ent/source"
	"github.com/faomg201/app/ent/user"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeFOODMENU   = "FOODMENU"
	TypeMainingre  = "Mainingre"
	TypeRecordfood = "Recordfood"
	TypeSource     = "Source"
	TypeUser       = "User"
)

// FOODMENUMutation represents an operation that mutate the FOODMENUs
// nodes in the graph.
type FOODMENUMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	_FOODMENU_NAME          *string
	clearedFields           map[string]struct{}
	_FOODMENU_RECORD        map[int]struct{}
	removed_FOODMENU_RECORD map[int]struct{}
	cleared_FOODMENU_RECORD bool
	done                    bool
	oldValue                func(context.Context) (*FOODMENU, error)
}

var _ ent.Mutation = (*FOODMENUMutation)(nil)

// foodmenuOption allows to manage the mutation configuration using functional options.
type foodmenuOption func(*FOODMENUMutation)

// newFOODMENUMutation creates new mutation for $n.Name.
func newFOODMENUMutation(c config, op Op, opts ...foodmenuOption) *FOODMENUMutation {
	m := &FOODMENUMutation{
		config:        c,
		op:            op,
		typ:           TypeFOODMENU,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFOODMENUID sets the id field of the mutation.
func withFOODMENUID(id int) foodmenuOption {
	return func(m *FOODMENUMutation) {
		var (
			err   error
			once  sync.Once
			value *FOODMENU
		)
		m.oldValue = func(ctx context.Context) (*FOODMENU, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FOODMENU.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFOODMENU sets the old FOODMENU of the mutation.
func withFOODMENU(node *FOODMENU) foodmenuOption {
	return func(m *FOODMENUMutation) {
		m.oldValue = func(context.Context) (*FOODMENU, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FOODMENUMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FOODMENUMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *FOODMENUMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetFOODMENUNAME sets the FOODMENU_NAME field.
func (m *FOODMENUMutation) SetFOODMENUNAME(s string) {
	m._FOODMENU_NAME = &s
}

// FOODMENUNAME returns the FOODMENU_NAME value in the mutation.
func (m *FOODMENUMutation) FOODMENUNAME() (r string, exists bool) {
	v := m._FOODMENU_NAME
	if v == nil {
		return
	}
	return *v, true
}

// OldFOODMENUNAME returns the old FOODMENU_NAME value of the FOODMENU.
// If the FOODMENU object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *FOODMENUMutation) OldFOODMENUNAME(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFOODMENUNAME is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFOODMENUNAME requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFOODMENUNAME: %w", err)
	}
	return oldValue.FOODMENUNAME, nil
}

// ResetFOODMENUNAME reset all changes of the "FOODMENU_NAME" field.
func (m *FOODMENUMutation) ResetFOODMENUNAME() {
	m._FOODMENU_NAME = nil
}

// AddFOODMENURECORDIDs adds the FOODMENU_RECORD edge to Recordfood by ids.
func (m *FOODMENUMutation) AddFOODMENURECORDIDs(ids ...int) {
	if m._FOODMENU_RECORD == nil {
		m._FOODMENU_RECORD = make(map[int]struct{})
	}
	for i := range ids {
		m._FOODMENU_RECORD[ids[i]] = struct{}{}
	}
}

// ClearFOODMENURECORD clears the FOODMENU_RECORD edge to Recordfood.
func (m *FOODMENUMutation) ClearFOODMENURECORD() {
	m.cleared_FOODMENU_RECORD = true
}

// FOODMENURECORDCleared returns if the edge FOODMENU_RECORD was cleared.
func (m *FOODMENUMutation) FOODMENURECORDCleared() bool {
	return m.cleared_FOODMENU_RECORD
}

// RemoveFOODMENURECORDIDs removes the FOODMENU_RECORD edge to Recordfood by ids.
func (m *FOODMENUMutation) RemoveFOODMENURECORDIDs(ids ...int) {
	if m.removed_FOODMENU_RECORD == nil {
		m.removed_FOODMENU_RECORD = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_FOODMENU_RECORD[ids[i]] = struct{}{}
	}
}

// RemovedFOODMENURECORD returns the removed ids of FOODMENU_RECORD.
func (m *FOODMENUMutation) RemovedFOODMENURECORDIDs() (ids []int) {
	for id := range m.removed_FOODMENU_RECORD {
		ids = append(ids, id)
	}
	return
}

// FOODMENURECORDIDs returns the FOODMENU_RECORD ids in the mutation.
func (m *FOODMENUMutation) FOODMENURECORDIDs() (ids []int) {
	for id := range m._FOODMENU_RECORD {
		ids = append(ids, id)
	}
	return
}

// ResetFOODMENURECORD reset all changes of the "FOODMENU_RECORD" edge.
func (m *FOODMENUMutation) ResetFOODMENURECORD() {
	m._FOODMENU_RECORD = nil
	m.cleared_FOODMENU_RECORD = false
	m.removed_FOODMENU_RECORD = nil
}

// Op returns the operation name.
func (m *FOODMENUMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (FOODMENU).
func (m *FOODMENUMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *FOODMENUMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._FOODMENU_NAME != nil {
		fields = append(fields, foodmenu.FieldFOODMENUNAME)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *FOODMENUMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case foodmenu.FieldFOODMENUNAME:
		return m.FOODMENUNAME()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *FOODMENUMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case foodmenu.FieldFOODMENUNAME:
		return m.OldFOODMENUNAME(ctx)
	}
	return nil, fmt.Errorf("unknown FOODMENU field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *FOODMENUMutation) SetField(name string, value ent.Value) error {
	switch name {
	case foodmenu.FieldFOODMENUNAME:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFOODMENUNAME(v)
		return nil
	}
	return fmt.Errorf("unknown FOODMENU field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *FOODMENUMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *FOODMENUMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *FOODMENUMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown FOODMENU numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *FOODMENUMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *FOODMENUMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *FOODMENUMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FOODMENU nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *FOODMENUMutation) ResetField(name string) error {
	switch name {
	case foodmenu.FieldFOODMENUNAME:
		m.ResetFOODMENUNAME()
		return nil
	}
	return fmt.Errorf("unknown FOODMENU field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *FOODMENUMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._FOODMENU_RECORD != nil {
		edges = append(edges, foodmenu.EdgeFOODMENURECORD)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *FOODMENUMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case foodmenu.EdgeFOODMENURECORD:
		ids := make([]ent.Value, 0, len(m._FOODMENU_RECORD))
		for id := range m._FOODMENU_RECORD {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *FOODMENUMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_FOODMENU_RECORD != nil {
		edges = append(edges, foodmenu.EdgeFOODMENURECORD)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *FOODMENUMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case foodmenu.EdgeFOODMENURECORD:
		ids := make([]ent.Value, 0, len(m.removed_FOODMENU_RECORD))
		for id := range m.removed_FOODMENU_RECORD {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *FOODMENUMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_FOODMENU_RECORD {
		edges = append(edges, foodmenu.EdgeFOODMENURECORD)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *FOODMENUMutation) EdgeCleared(name string) bool {
	switch name {
	case foodmenu.EdgeFOODMENURECORD:
		return m.cleared_FOODMENU_RECORD
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *FOODMENUMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown FOODMENU unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *FOODMENUMutation) ResetEdge(name string) error {
	switch name {
	case foodmenu.EdgeFOODMENURECORD:
		m.ResetFOODMENURECORD()
		return nil
	}
	return fmt.Errorf("unknown FOODMENU edge %s", name)
}

// MainingreMutation represents an operation that mutate the Mainingres
// nodes in the graph.
type MainingreMutation struct {
	config
	op                       Op
	typ                      string
	id                       *int
	_MAIN_INGREDIENT_NAME    *string
	clearedFields            map[string]struct{}
	_MAININGRE_RECORD        map[int]struct{}
	removed_MAININGRE_RECORD map[int]struct{}
	cleared_MAININGRE_RECORD bool
	done                     bool
	oldValue                 func(context.Context) (*Mainingre, error)
}

var _ ent.Mutation = (*MainingreMutation)(nil)

// mainingreOption allows to manage the mutation configuration using functional options.
type mainingreOption func(*MainingreMutation)

// newMainingreMutation creates new mutation for $n.Name.
func newMainingreMutation(c config, op Op, opts ...mainingreOption) *MainingreMutation {
	m := &MainingreMutation{
		config:        c,
		op:            op,
		typ:           TypeMainingre,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMainingreID sets the id field of the mutation.
func withMainingreID(id int) mainingreOption {
	return func(m *MainingreMutation) {
		var (
			err   error
			once  sync.Once
			value *Mainingre
		)
		m.oldValue = func(ctx context.Context) (*Mainingre, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Mainingre.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMainingre sets the old Mainingre of the mutation.
func withMainingre(node *Mainingre) mainingreOption {
	return func(m *MainingreMutation) {
		m.oldValue = func(context.Context) (*Mainingre, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MainingreMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MainingreMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *MainingreMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetMAININGREDIENTNAME sets the MAIN_INGREDIENT_NAME field.
func (m *MainingreMutation) SetMAININGREDIENTNAME(s string) {
	m._MAIN_INGREDIENT_NAME = &s
}

// MAININGREDIENTNAME returns the MAIN_INGREDIENT_NAME value in the mutation.
func (m *MainingreMutation) MAININGREDIENTNAME() (r string, exists bool) {
	v := m._MAIN_INGREDIENT_NAME
	if v == nil {
		return
	}
	return *v, true
}

// OldMAININGREDIENTNAME returns the old MAIN_INGREDIENT_NAME value of the Mainingre.
// If the Mainingre object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *MainingreMutation) OldMAININGREDIENTNAME(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMAININGREDIENTNAME is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMAININGREDIENTNAME requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMAININGREDIENTNAME: %w", err)
	}
	return oldValue.MAININGREDIENTNAME, nil
}

// ResetMAININGREDIENTNAME reset all changes of the "MAIN_INGREDIENT_NAME" field.
func (m *MainingreMutation) ResetMAININGREDIENTNAME() {
	m._MAIN_INGREDIENT_NAME = nil
}

// AddMAININGRERECORDIDs adds the MAININGRE_RECORD edge to Recordfood by ids.
func (m *MainingreMutation) AddMAININGRERECORDIDs(ids ...int) {
	if m._MAININGRE_RECORD == nil {
		m._MAININGRE_RECORD = make(map[int]struct{})
	}
	for i := range ids {
		m._MAININGRE_RECORD[ids[i]] = struct{}{}
	}
}

// ClearMAININGRERECORD clears the MAININGRE_RECORD edge to Recordfood.
func (m *MainingreMutation) ClearMAININGRERECORD() {
	m.cleared_MAININGRE_RECORD = true
}

// MAININGRERECORDCleared returns if the edge MAININGRE_RECORD was cleared.
func (m *MainingreMutation) MAININGRERECORDCleared() bool {
	return m.cleared_MAININGRE_RECORD
}

// RemoveMAININGRERECORDIDs removes the MAININGRE_RECORD edge to Recordfood by ids.
func (m *MainingreMutation) RemoveMAININGRERECORDIDs(ids ...int) {
	if m.removed_MAININGRE_RECORD == nil {
		m.removed_MAININGRE_RECORD = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_MAININGRE_RECORD[ids[i]] = struct{}{}
	}
}

// RemovedMAININGRERECORD returns the removed ids of MAININGRE_RECORD.
func (m *MainingreMutation) RemovedMAININGRERECORDIDs() (ids []int) {
	for id := range m.removed_MAININGRE_RECORD {
		ids = append(ids, id)
	}
	return
}

// MAININGRERECORDIDs returns the MAININGRE_RECORD ids in the mutation.
func (m *MainingreMutation) MAININGRERECORDIDs() (ids []int) {
	for id := range m._MAININGRE_RECORD {
		ids = append(ids, id)
	}
	return
}

// ResetMAININGRERECORD reset all changes of the "MAININGRE_RECORD" edge.
func (m *MainingreMutation) ResetMAININGRERECORD() {
	m._MAININGRE_RECORD = nil
	m.cleared_MAININGRE_RECORD = false
	m.removed_MAININGRE_RECORD = nil
}

// Op returns the operation name.
func (m *MainingreMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Mainingre).
func (m *MainingreMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *MainingreMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._MAIN_INGREDIENT_NAME != nil {
		fields = append(fields, mainingre.FieldMAININGREDIENTNAME)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *MainingreMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case mainingre.FieldMAININGREDIENTNAME:
		return m.MAININGREDIENTNAME()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *MainingreMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case mainingre.FieldMAININGREDIENTNAME:
		return m.OldMAININGREDIENTNAME(ctx)
	}
	return nil, fmt.Errorf("unknown Mainingre field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MainingreMutation) SetField(name string, value ent.Value) error {
	switch name {
	case mainingre.FieldMAININGREDIENTNAME:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMAININGREDIENTNAME(v)
		return nil
	}
	return fmt.Errorf("unknown Mainingre field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *MainingreMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *MainingreMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MainingreMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Mainingre numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *MainingreMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *MainingreMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *MainingreMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Mainingre nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *MainingreMutation) ResetField(name string) error {
	switch name {
	case mainingre.FieldMAININGREDIENTNAME:
		m.ResetMAININGREDIENTNAME()
		return nil
	}
	return fmt.Errorf("unknown Mainingre field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *MainingreMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._MAININGRE_RECORD != nil {
		edges = append(edges, mainingre.EdgeMAININGRERECORD)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *MainingreMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case mainingre.EdgeMAININGRERECORD:
		ids := make([]ent.Value, 0, len(m._MAININGRE_RECORD))
		for id := range m._MAININGRE_RECORD {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *MainingreMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_MAININGRE_RECORD != nil {
		edges = append(edges, mainingre.EdgeMAININGRERECORD)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *MainingreMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case mainingre.EdgeMAININGRERECORD:
		ids := make([]ent.Value, 0, len(m.removed_MAININGRE_RECORD))
		for id := range m.removed_MAININGRE_RECORD {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *MainingreMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_MAININGRE_RECORD {
		edges = append(edges, mainingre.EdgeMAININGRERECORD)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *MainingreMutation) EdgeCleared(name string) bool {
	switch name {
	case mainingre.EdgeMAININGRERECORD:
		return m.cleared_MAININGRE_RECORD
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *MainingreMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Mainingre unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *MainingreMutation) ResetEdge(name string) error {
	switch name {
	case mainingre.EdgeMAININGRERECORD:
		m.ResetMAININGRERECORD()
		return nil
	}
	return fmt.Errorf("unknown Mainingre edge %s", name)
}

// RecordfoodMutation represents an operation that mutate the Recordfoods
// nodes in the graph.
type RecordfoodMutation struct {
	config
	op                        Op
	typ                       string
	id                        *int
	clearedFields             map[string]struct{}
	_RECORD_USER              *int
	cleared_RECORD_USER       bool
	_RECORD_FOODMENU          *int
	cleared_RECORD_FOODMENU   bool
	_RECORD_INGREDIENT        *int
	cleared_RECORD_INGREDIENT bool
	_RECORD_SOURCE            *int
	cleared_RECORD_SOURCE     bool
	done                      bool
	oldValue                  func(context.Context) (*Recordfood, error)
}

var _ ent.Mutation = (*RecordfoodMutation)(nil)

// recordfoodOption allows to manage the mutation configuration using functional options.
type recordfoodOption func(*RecordfoodMutation)

// newRecordfoodMutation creates new mutation for $n.Name.
func newRecordfoodMutation(c config, op Op, opts ...recordfoodOption) *RecordfoodMutation {
	m := &RecordfoodMutation{
		config:        c,
		op:            op,
		typ:           TypeRecordfood,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRecordfoodID sets the id field of the mutation.
func withRecordfoodID(id int) recordfoodOption {
	return func(m *RecordfoodMutation) {
		var (
			err   error
			once  sync.Once
			value *Recordfood
		)
		m.oldValue = func(ctx context.Context) (*Recordfood, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Recordfood.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRecordfood sets the old Recordfood of the mutation.
func withRecordfood(node *Recordfood) recordfoodOption {
	return func(m *RecordfoodMutation) {
		m.oldValue = func(context.Context) (*Recordfood, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RecordfoodMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RecordfoodMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RecordfoodMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetRECORDUSERID sets the RECORD_USER edge to User by id.
func (m *RecordfoodMutation) SetRECORDUSERID(id int) {
	m._RECORD_USER = &id
}

// ClearRECORDUSER clears the RECORD_USER edge to User.
func (m *RecordfoodMutation) ClearRECORDUSER() {
	m.cleared_RECORD_USER = true
}

// RECORDUSERCleared returns if the edge RECORD_USER was cleared.
func (m *RecordfoodMutation) RECORDUSERCleared() bool {
	return m.cleared_RECORD_USER
}

// RECORDUSERID returns the RECORD_USER id in the mutation.
func (m *RecordfoodMutation) RECORDUSERID() (id int, exists bool) {
	if m._RECORD_USER != nil {
		return *m._RECORD_USER, true
	}
	return
}

// RECORDUSERIDs returns the RECORD_USER ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// RECORDUSERID instead. It exists only for internal usage by the builders.
func (m *RecordfoodMutation) RECORDUSERIDs() (ids []int) {
	if id := m._RECORD_USER; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRECORDUSER reset all changes of the "RECORD_USER" edge.
func (m *RecordfoodMutation) ResetRECORDUSER() {
	m._RECORD_USER = nil
	m.cleared_RECORD_USER = false
}

// SetRECORDFOODMENUID sets the RECORD_FOODMENU edge to FOODMENU by id.
func (m *RecordfoodMutation) SetRECORDFOODMENUID(id int) {
	m._RECORD_FOODMENU = &id
}

// ClearRECORDFOODMENU clears the RECORD_FOODMENU edge to FOODMENU.
func (m *RecordfoodMutation) ClearRECORDFOODMENU() {
	m.cleared_RECORD_FOODMENU = true
}

// RECORDFOODMENUCleared returns if the edge RECORD_FOODMENU was cleared.
func (m *RecordfoodMutation) RECORDFOODMENUCleared() bool {
	return m.cleared_RECORD_FOODMENU
}

// RECORDFOODMENUID returns the RECORD_FOODMENU id in the mutation.
func (m *RecordfoodMutation) RECORDFOODMENUID() (id int, exists bool) {
	if m._RECORD_FOODMENU != nil {
		return *m._RECORD_FOODMENU, true
	}
	return
}

// RECORDFOODMENUIDs returns the RECORD_FOODMENU ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// RECORDFOODMENUID instead. It exists only for internal usage by the builders.
func (m *RecordfoodMutation) RECORDFOODMENUIDs() (ids []int) {
	if id := m._RECORD_FOODMENU; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRECORDFOODMENU reset all changes of the "RECORD_FOODMENU" edge.
func (m *RecordfoodMutation) ResetRECORDFOODMENU() {
	m._RECORD_FOODMENU = nil
	m.cleared_RECORD_FOODMENU = false
}

// SetRECORDINGREDIENTID sets the RECORD_INGREDIENT edge to Mainingre by id.
func (m *RecordfoodMutation) SetRECORDINGREDIENTID(id int) {
	m._RECORD_INGREDIENT = &id
}

// ClearRECORDINGREDIENT clears the RECORD_INGREDIENT edge to Mainingre.
func (m *RecordfoodMutation) ClearRECORDINGREDIENT() {
	m.cleared_RECORD_INGREDIENT = true
}

// RECORDINGREDIENTCleared returns if the edge RECORD_INGREDIENT was cleared.
func (m *RecordfoodMutation) RECORDINGREDIENTCleared() bool {
	return m.cleared_RECORD_INGREDIENT
}

// RECORDINGREDIENTID returns the RECORD_INGREDIENT id in the mutation.
func (m *RecordfoodMutation) RECORDINGREDIENTID() (id int, exists bool) {
	if m._RECORD_INGREDIENT != nil {
		return *m._RECORD_INGREDIENT, true
	}
	return
}

// RECORDINGREDIENTIDs returns the RECORD_INGREDIENT ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// RECORDINGREDIENTID instead. It exists only for internal usage by the builders.
func (m *RecordfoodMutation) RECORDINGREDIENTIDs() (ids []int) {
	if id := m._RECORD_INGREDIENT; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRECORDINGREDIENT reset all changes of the "RECORD_INGREDIENT" edge.
func (m *RecordfoodMutation) ResetRECORDINGREDIENT() {
	m._RECORD_INGREDIENT = nil
	m.cleared_RECORD_INGREDIENT = false
}

// SetRECORDSOURCEID sets the RECORD_SOURCE edge to Source by id.
func (m *RecordfoodMutation) SetRECORDSOURCEID(id int) {
	m._RECORD_SOURCE = &id
}

// ClearRECORDSOURCE clears the RECORD_SOURCE edge to Source.
func (m *RecordfoodMutation) ClearRECORDSOURCE() {
	m.cleared_RECORD_SOURCE = true
}

// RECORDSOURCECleared returns if the edge RECORD_SOURCE was cleared.
func (m *RecordfoodMutation) RECORDSOURCECleared() bool {
	return m.cleared_RECORD_SOURCE
}

// RECORDSOURCEID returns the RECORD_SOURCE id in the mutation.
func (m *RecordfoodMutation) RECORDSOURCEID() (id int, exists bool) {
	if m._RECORD_SOURCE != nil {
		return *m._RECORD_SOURCE, true
	}
	return
}

// RECORDSOURCEIDs returns the RECORD_SOURCE ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// RECORDSOURCEID instead. It exists only for internal usage by the builders.
func (m *RecordfoodMutation) RECORDSOURCEIDs() (ids []int) {
	if id := m._RECORD_SOURCE; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRECORDSOURCE reset all changes of the "RECORD_SOURCE" edge.
func (m *RecordfoodMutation) ResetRECORDSOURCE() {
	m._RECORD_SOURCE = nil
	m.cleared_RECORD_SOURCE = false
}

// Op returns the operation name.
func (m *RecordfoodMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Recordfood).
func (m *RecordfoodMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RecordfoodMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RecordfoodMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RecordfoodMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Recordfood field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RecordfoodMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Recordfood field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RecordfoodMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RecordfoodMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RecordfoodMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Recordfood numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RecordfoodMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RecordfoodMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RecordfoodMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Recordfood nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RecordfoodMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Recordfood field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RecordfoodMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m._RECORD_USER != nil {
		edges = append(edges, recordfood.EdgeRECORDUSER)
	}
	if m._RECORD_FOODMENU != nil {
		edges = append(edges, recordfood.EdgeRECORDFOODMENU)
	}
	if m._RECORD_INGREDIENT != nil {
		edges = append(edges, recordfood.EdgeRECORDINGREDIENT)
	}
	if m._RECORD_SOURCE != nil {
		edges = append(edges, recordfood.EdgeRECORDSOURCE)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RecordfoodMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case recordfood.EdgeRECORDUSER:
		if id := m._RECORD_USER; id != nil {
			return []ent.Value{*id}
		}
	case recordfood.EdgeRECORDFOODMENU:
		if id := m._RECORD_FOODMENU; id != nil {
			return []ent.Value{*id}
		}
	case recordfood.EdgeRECORDINGREDIENT:
		if id := m._RECORD_INGREDIENT; id != nil {
			return []ent.Value{*id}
		}
	case recordfood.EdgeRECORDSOURCE:
		if id := m._RECORD_SOURCE; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RecordfoodMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RecordfoodMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RecordfoodMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.cleared_RECORD_USER {
		edges = append(edges, recordfood.EdgeRECORDUSER)
	}
	if m.cleared_RECORD_FOODMENU {
		edges = append(edges, recordfood.EdgeRECORDFOODMENU)
	}
	if m.cleared_RECORD_INGREDIENT {
		edges = append(edges, recordfood.EdgeRECORDINGREDIENT)
	}
	if m.cleared_RECORD_SOURCE {
		edges = append(edges, recordfood.EdgeRECORDSOURCE)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RecordfoodMutation) EdgeCleared(name string) bool {
	switch name {
	case recordfood.EdgeRECORDUSER:
		return m.cleared_RECORD_USER
	case recordfood.EdgeRECORDFOODMENU:
		return m.cleared_RECORD_FOODMENU
	case recordfood.EdgeRECORDINGREDIENT:
		return m.cleared_RECORD_INGREDIENT
	case recordfood.EdgeRECORDSOURCE:
		return m.cleared_RECORD_SOURCE
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RecordfoodMutation) ClearEdge(name string) error {
	switch name {
	case recordfood.EdgeRECORDUSER:
		m.ClearRECORDUSER()
		return nil
	case recordfood.EdgeRECORDFOODMENU:
		m.ClearRECORDFOODMENU()
		return nil
	case recordfood.EdgeRECORDINGREDIENT:
		m.ClearRECORDINGREDIENT()
		return nil
	case recordfood.EdgeRECORDSOURCE:
		m.ClearRECORDSOURCE()
		return nil
	}
	return fmt.Errorf("unknown Recordfood unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RecordfoodMutation) ResetEdge(name string) error {
	switch name {
	case recordfood.EdgeRECORDUSER:
		m.ResetRECORDUSER()
		return nil
	case recordfood.EdgeRECORDFOODMENU:
		m.ResetRECORDFOODMENU()
		return nil
	case recordfood.EdgeRECORDINGREDIENT:
		m.ResetRECORDINGREDIENT()
		return nil
	case recordfood.EdgeRECORDSOURCE:
		m.ResetRECORDSOURCE()
		return nil
	}
	return fmt.Errorf("unknown Recordfood edge %s", name)
}

// SourceMutation represents an operation that mutate the Sources
// nodes in the graph.
type SourceMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	_SOURCE_NAME          *string
	_SOURCE_ADDRESS       *string
	_SOURCE_TLE           *string
	clearedFields         map[string]struct{}
	_SOURCE_RECORD        map[int]struct{}
	removed_SOURCE_RECORD map[int]struct{}
	cleared_SOURCE_RECORD bool
	done                  bool
	oldValue              func(context.Context) (*Source, error)
}

var _ ent.Mutation = (*SourceMutation)(nil)

// sourceOption allows to manage the mutation configuration using functional options.
type sourceOption func(*SourceMutation)

// newSourceMutation creates new mutation for $n.Name.
func newSourceMutation(c config, op Op, opts ...sourceOption) *SourceMutation {
	m := &SourceMutation{
		config:        c,
		op:            op,
		typ:           TypeSource,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSourceID sets the id field of the mutation.
func withSourceID(id int) sourceOption {
	return func(m *SourceMutation) {
		var (
			err   error
			once  sync.Once
			value *Source
		)
		m.oldValue = func(ctx context.Context) (*Source, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Source.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSource sets the old Source of the mutation.
func withSource(node *Source) sourceOption {
	return func(m *SourceMutation) {
		m.oldValue = func(context.Context) (*Source, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SourceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SourceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *SourceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSOURCENAME sets the SOURCE_NAME field.
func (m *SourceMutation) SetSOURCENAME(s string) {
	m._SOURCE_NAME = &s
}

// SOURCENAME returns the SOURCE_NAME value in the mutation.
func (m *SourceMutation) SOURCENAME() (r string, exists bool) {
	v := m._SOURCE_NAME
	if v == nil {
		return
	}
	return *v, true
}

// OldSOURCENAME returns the old SOURCE_NAME value of the Source.
// If the Source object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SourceMutation) OldSOURCENAME(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSOURCENAME is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSOURCENAME requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSOURCENAME: %w", err)
	}
	return oldValue.SOURCENAME, nil
}

// ResetSOURCENAME reset all changes of the "SOURCE_NAME" field.
func (m *SourceMutation) ResetSOURCENAME() {
	m._SOURCE_NAME = nil
}

// SetSOURCEADDRESS sets the SOURCE_ADDRESS field.
func (m *SourceMutation) SetSOURCEADDRESS(s string) {
	m._SOURCE_ADDRESS = &s
}

// SOURCEADDRESS returns the SOURCE_ADDRESS value in the mutation.
func (m *SourceMutation) SOURCEADDRESS() (r string, exists bool) {
	v := m._SOURCE_ADDRESS
	if v == nil {
		return
	}
	return *v, true
}

// OldSOURCEADDRESS returns the old SOURCE_ADDRESS value of the Source.
// If the Source object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SourceMutation) OldSOURCEADDRESS(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSOURCEADDRESS is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSOURCEADDRESS requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSOURCEADDRESS: %w", err)
	}
	return oldValue.SOURCEADDRESS, nil
}

// ResetSOURCEADDRESS reset all changes of the "SOURCE_ADDRESS" field.
func (m *SourceMutation) ResetSOURCEADDRESS() {
	m._SOURCE_ADDRESS = nil
}

// SetSOURCETLE sets the SOURCE_TLE field.
func (m *SourceMutation) SetSOURCETLE(s string) {
	m._SOURCE_TLE = &s
}

// SOURCETLE returns the SOURCE_TLE value in the mutation.
func (m *SourceMutation) SOURCETLE() (r string, exists bool) {
	v := m._SOURCE_TLE
	if v == nil {
		return
	}
	return *v, true
}

// OldSOURCETLE returns the old SOURCE_TLE value of the Source.
// If the Source object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *SourceMutation) OldSOURCETLE(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSOURCETLE is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSOURCETLE requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSOURCETLE: %w", err)
	}
	return oldValue.SOURCETLE, nil
}

// ResetSOURCETLE reset all changes of the "SOURCE_TLE" field.
func (m *SourceMutation) ResetSOURCETLE() {
	m._SOURCE_TLE = nil
}

// AddSOURCERECORDIDs adds the SOURCE_RECORD edge to Recordfood by ids.
func (m *SourceMutation) AddSOURCERECORDIDs(ids ...int) {
	if m._SOURCE_RECORD == nil {
		m._SOURCE_RECORD = make(map[int]struct{})
	}
	for i := range ids {
		m._SOURCE_RECORD[ids[i]] = struct{}{}
	}
}

// ClearSOURCERECORD clears the SOURCE_RECORD edge to Recordfood.
func (m *SourceMutation) ClearSOURCERECORD() {
	m.cleared_SOURCE_RECORD = true
}

// SOURCERECORDCleared returns if the edge SOURCE_RECORD was cleared.
func (m *SourceMutation) SOURCERECORDCleared() bool {
	return m.cleared_SOURCE_RECORD
}

// RemoveSOURCERECORDIDs removes the SOURCE_RECORD edge to Recordfood by ids.
func (m *SourceMutation) RemoveSOURCERECORDIDs(ids ...int) {
	if m.removed_SOURCE_RECORD == nil {
		m.removed_SOURCE_RECORD = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_SOURCE_RECORD[ids[i]] = struct{}{}
	}
}

// RemovedSOURCERECORD returns the removed ids of SOURCE_RECORD.
func (m *SourceMutation) RemovedSOURCERECORDIDs() (ids []int) {
	for id := range m.removed_SOURCE_RECORD {
		ids = append(ids, id)
	}
	return
}

// SOURCERECORDIDs returns the SOURCE_RECORD ids in the mutation.
func (m *SourceMutation) SOURCERECORDIDs() (ids []int) {
	for id := range m._SOURCE_RECORD {
		ids = append(ids, id)
	}
	return
}

// ResetSOURCERECORD reset all changes of the "SOURCE_RECORD" edge.
func (m *SourceMutation) ResetSOURCERECORD() {
	m._SOURCE_RECORD = nil
	m.cleared_SOURCE_RECORD = false
	m.removed_SOURCE_RECORD = nil
}

// Op returns the operation name.
func (m *SourceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Source).
func (m *SourceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *SourceMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m._SOURCE_NAME != nil {
		fields = append(fields, source.FieldSOURCENAME)
	}
	if m._SOURCE_ADDRESS != nil {
		fields = append(fields, source.FieldSOURCEADDRESS)
	}
	if m._SOURCE_TLE != nil {
		fields = append(fields, source.FieldSOURCETLE)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *SourceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case source.FieldSOURCENAME:
		return m.SOURCENAME()
	case source.FieldSOURCEADDRESS:
		return m.SOURCEADDRESS()
	case source.FieldSOURCETLE:
		return m.SOURCETLE()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *SourceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case source.FieldSOURCENAME:
		return m.OldSOURCENAME(ctx)
	case source.FieldSOURCEADDRESS:
		return m.OldSOURCEADDRESS(ctx)
	case source.FieldSOURCETLE:
		return m.OldSOURCETLE(ctx)
	}
	return nil, fmt.Errorf("unknown Source field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SourceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case source.FieldSOURCENAME:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSOURCENAME(v)
		return nil
	case source.FieldSOURCEADDRESS:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSOURCEADDRESS(v)
		return nil
	case source.FieldSOURCETLE:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSOURCETLE(v)
		return nil
	}
	return fmt.Errorf("unknown Source field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *SourceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *SourceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *SourceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Source numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *SourceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *SourceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *SourceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Source nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *SourceMutation) ResetField(name string) error {
	switch name {
	case source.FieldSOURCENAME:
		m.ResetSOURCENAME()
		return nil
	case source.FieldSOURCEADDRESS:
		m.ResetSOURCEADDRESS()
		return nil
	case source.FieldSOURCETLE:
		m.ResetSOURCETLE()
		return nil
	}
	return fmt.Errorf("unknown Source field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *SourceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._SOURCE_RECORD != nil {
		edges = append(edges, source.EdgeSOURCERECORD)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *SourceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case source.EdgeSOURCERECORD:
		ids := make([]ent.Value, 0, len(m._SOURCE_RECORD))
		for id := range m._SOURCE_RECORD {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *SourceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_SOURCE_RECORD != nil {
		edges = append(edges, source.EdgeSOURCERECORD)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *SourceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case source.EdgeSOURCERECORD:
		ids := make([]ent.Value, 0, len(m.removed_SOURCE_RECORD))
		for id := range m.removed_SOURCE_RECORD {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *SourceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_SOURCE_RECORD {
		edges = append(edges, source.EdgeSOURCERECORD)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *SourceMutation) EdgeCleared(name string) bool {
	switch name {
	case source.EdgeSOURCERECORD:
		return m.cleared_SOURCE_RECORD
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *SourceMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Source unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *SourceMutation) ResetEdge(name string) error {
	switch name {
	case source.EdgeSOURCERECORD:
		m.ResetSOURCERECORD()
		return nil
	}
	return fmt.Errorf("unknown Source edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	_USER_EMAIL         *string
	_USER_NAME          *string
	clearedFields       map[string]struct{}
	_USER_RECORD        map[int]struct{}
	removed_USER_RECORD map[int]struct{}
	cleared_USER_RECORD bool
	done                bool
	oldValue            func(context.Context) (*User, error)
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUSEREMAIL sets the USER_EMAIL field.
func (m *UserMutation) SetUSEREMAIL(s string) {
	m._USER_EMAIL = &s
}

// USEREMAIL returns the USER_EMAIL value in the mutation.
func (m *UserMutation) USEREMAIL() (r string, exists bool) {
	v := m._USER_EMAIL
	if v == nil {
		return
	}
	return *v, true
}

// OldUSEREMAIL returns the old USER_EMAIL value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUSEREMAIL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUSEREMAIL is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUSEREMAIL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUSEREMAIL: %w", err)
	}
	return oldValue.USEREMAIL, nil
}

// ResetUSEREMAIL reset all changes of the "USER_EMAIL" field.
func (m *UserMutation) ResetUSEREMAIL() {
	m._USER_EMAIL = nil
}

// SetUSERNAME sets the USER_NAME field.
func (m *UserMutation) SetUSERNAME(s string) {
	m._USER_NAME = &s
}

// USERNAME returns the USER_NAME value in the mutation.
func (m *UserMutation) USERNAME() (r string, exists bool) {
	v := m._USER_NAME
	if v == nil {
		return
	}
	return *v, true
}

// OldUSERNAME returns the old USER_NAME value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldUSERNAME(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUSERNAME is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUSERNAME requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUSERNAME: %w", err)
	}
	return oldValue.USERNAME, nil
}

// ResetUSERNAME reset all changes of the "USER_NAME" field.
func (m *UserMutation) ResetUSERNAME() {
	m._USER_NAME = nil
}

// AddUSERRECORDIDs adds the USER_RECORD edge to Recordfood by ids.
func (m *UserMutation) AddUSERRECORDIDs(ids ...int) {
	if m._USER_RECORD == nil {
		m._USER_RECORD = make(map[int]struct{})
	}
	for i := range ids {
		m._USER_RECORD[ids[i]] = struct{}{}
	}
}

// ClearUSERRECORD clears the USER_RECORD edge to Recordfood.
func (m *UserMutation) ClearUSERRECORD() {
	m.cleared_USER_RECORD = true
}

// USERRECORDCleared returns if the edge USER_RECORD was cleared.
func (m *UserMutation) USERRECORDCleared() bool {
	return m.cleared_USER_RECORD
}

// RemoveUSERRECORDIDs removes the USER_RECORD edge to Recordfood by ids.
func (m *UserMutation) RemoveUSERRECORDIDs(ids ...int) {
	if m.removed_USER_RECORD == nil {
		m.removed_USER_RECORD = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_USER_RECORD[ids[i]] = struct{}{}
	}
}

// RemovedUSERRECORD returns the removed ids of USER_RECORD.
func (m *UserMutation) RemovedUSERRECORDIDs() (ids []int) {
	for id := range m.removed_USER_RECORD {
		ids = append(ids, id)
	}
	return
}

// USERRECORDIDs returns the USER_RECORD ids in the mutation.
func (m *UserMutation) USERRECORDIDs() (ids []int) {
	for id := range m._USER_RECORD {
		ids = append(ids, id)
	}
	return
}

// ResetUSERRECORD reset all changes of the "USER_RECORD" edge.
func (m *UserMutation) ResetUSERRECORD() {
	m._USER_RECORD = nil
	m.cleared_USER_RECORD = false
	m.removed_USER_RECORD = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m._USER_EMAIL != nil {
		fields = append(fields, user.FieldUSEREMAIL)
	}
	if m._USER_NAME != nil {
		fields = append(fields, user.FieldUSERNAME)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUSEREMAIL:
		return m.USEREMAIL()
	case user.FieldUSERNAME:
		return m.USERNAME()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUSEREMAIL:
		return m.OldUSEREMAIL(ctx)
	case user.FieldUSERNAME:
		return m.OldUSERNAME(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUSEREMAIL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUSEREMAIL(v)
		return nil
	case user.FieldUSERNAME:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUSERNAME(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUSEREMAIL:
		m.ResetUSEREMAIL()
		return nil
	case user.FieldUSERNAME:
		m.ResetUSERNAME()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._USER_RECORD != nil {
		edges = append(edges, user.EdgeUSERRECORD)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUSERRECORD:
		ids := make([]ent.Value, 0, len(m._USER_RECORD))
		for id := range m._USER_RECORD {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_USER_RECORD != nil {
		edges = append(edges, user.EdgeUSERRECORD)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeUSERRECORD:
		ids := make([]ent.Value, 0, len(m.removed_USER_RECORD))
		for id := range m.removed_USER_RECORD {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleared_USER_RECORD {
		edges = append(edges, user.EdgeUSERRECORD)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeUSERRECORD:
		return m.cleared_USER_RECORD
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeUSERRECORD:
		m.ResetUSERRECORD()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
